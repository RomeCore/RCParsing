//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from e:/CSharp Projects/ANTLR Parsers/GraphQL/GraphQL.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class GraphQLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		NAME=53, STRING=54, BLOCK_STRING=55, ID=56, FLOAT=57, INT=58, PUNCTUATOR=59, 
		WS=60, COMMA=61, LineComment=62, UNICODE_BOM=63, UTF8_BOM=64, UTF16_BOM=65, 
		UTF32_BOM=66;
	public const int
		RULE_document = 0, RULE_definition = 1, RULE_executableDocument = 2, RULE_executableDefinition = 3, 
		RULE_operationDefinition = 4, RULE_operationType = 5, RULE_selectionSet = 6, 
		RULE_selection = 7, RULE_field = 8, RULE_arguments = 9, RULE_argument = 10, 
		RULE_alias = 11, RULE_fragmentSpread = 12, RULE_fragmentDefinition = 13, 
		RULE_fragmentName = 14, RULE_typeCondition = 15, RULE_inlineFragment = 16, 
		RULE_value = 17, RULE_intValue = 18, RULE_floatValue = 19, RULE_booleanValue = 20, 
		RULE_stringValue = 21, RULE_nullValue = 22, RULE_enumValue = 23, RULE_listValue = 24, 
		RULE_objectValue = 25, RULE_objectField = 26, RULE_variable = 27, RULE_variableDefinitions = 28, 
		RULE_variableDefinition = 29, RULE_defaultValue = 30, RULE_type_ = 31, 
		RULE_namedType = 32, RULE_listType = 33, RULE_directives = 34, RULE_directive = 35, 
		RULE_typeSystemDocument = 36, RULE_typeSystemDefinition = 37, RULE_typeSystemExtensionDocument = 38, 
		RULE_typeSystemExtension = 39, RULE_schemaDefinition = 40, RULE_rootOperationTypeDefinition = 41, 
		RULE_schemaExtension = 42, RULE_description = 43, RULE_typeDefinition = 44, 
		RULE_typeExtension = 45, RULE_scalarTypeDefinition = 46, RULE_scalarTypeExtension = 47, 
		RULE_objectTypeDefinition = 48, RULE_implementsInterfaces = 49, RULE_fieldsDefinition = 50, 
		RULE_fieldDefinition = 51, RULE_argumentsDefinition = 52, RULE_inputValueDefinition = 53, 
		RULE_objectTypeExtension = 54, RULE_interfaceTypeDefinition = 55, RULE_interfaceTypeExtension = 56, 
		RULE_unionTypeDefinition = 57, RULE_unionMemberTypes = 58, RULE_unionTypeExtension = 59, 
		RULE_enumTypeDefinition = 60, RULE_enumValuesDefinition = 61, RULE_enumValueDefinition = 62, 
		RULE_enumTypeExtension = 63, RULE_inputObjectTypeDefinition = 64, RULE_inputFieldsDefinition = 65, 
		RULE_inputObjectTypeExtension = 66, RULE_directiveDefinition = 67, RULE_directiveLocations = 68, 
		RULE_directiveLocation = 69, RULE_executableDirectiveLocation = 70, RULE_typeSystemDirectiveLocation = 71, 
		RULE_name = 72;
	public static readonly string[] ruleNames = {
		"document", "definition", "executableDocument", "executableDefinition", 
		"operationDefinition", "operationType", "selectionSet", "selection", "field", 
		"arguments", "argument", "alias", "fragmentSpread", "fragmentDefinition", 
		"fragmentName", "typeCondition", "inlineFragment", "value", "intValue", 
		"floatValue", "booleanValue", "stringValue", "nullValue", "enumValue", 
		"listValue", "objectValue", "objectField", "variable", "variableDefinitions", 
		"variableDefinition", "defaultValue", "type_", "namedType", "listType", 
		"directives", "directive", "typeSystemDocument", "typeSystemDefinition", 
		"typeSystemExtensionDocument", "typeSystemExtension", "schemaDefinition", 
		"rootOperationTypeDefinition", "schemaExtension", "description", "typeDefinition", 
		"typeExtension", "scalarTypeDefinition", "scalarTypeExtension", "objectTypeDefinition", 
		"implementsInterfaces", "fieldsDefinition", "fieldDefinition", "argumentsDefinition", 
		"inputValueDefinition", "objectTypeExtension", "interfaceTypeDefinition", 
		"interfaceTypeExtension", "unionTypeDefinition", "unionMemberTypes", "unionTypeExtension", 
		"enumTypeDefinition", "enumValuesDefinition", "enumValueDefinition", "enumTypeExtension", 
		"inputObjectTypeDefinition", "inputFieldsDefinition", "inputObjectTypeExtension", 
		"directiveDefinition", "directiveLocations", "directiveLocation", "executableDirectiveLocation", 
		"typeSystemDirectiveLocation", "name"
	};

	private static readonly string[] _LiteralNames = {
		null, "'query'", "'mutation'", "'subscription'", "'{'", "'}'", "'('", 
		"')'", "':'", "'...'", "'fragment'", "'on'", "'true'", "'false'", "'null'", 
		"'['", "']'", "'$'", "'='", "'!'", "'@'", "'schema'", "'extend'", "'scalar'", 
		"'type'", "'implements'", "'&'", "'interface'", "'union'", "'|'", "'enum'", 
		"'input'", "'directive'", "'repeatable'", "'QUERY'", "'MUTATION'", "'SUBSCRIPTION'", 
		"'FIELD'", "'FRAGMENT_DEFINITION'", "'FRAGMENT_SPREAD'", "'INLINE_FRAGMENT'", 
		"'VARIABLE_DEFINITION'", "'SCHEMA'", "'SCALAR'", "'OBJECT'", "'FIELD_DEFINITION'", 
		"'ARGUMENT_DEFINITION'", "'INTERFACE'", "'UNION'", "'ENUM'", "'ENUM_VALUE'", 
		"'INPUT_OBJECT'", "'INPUT_FIELD_DEFINITION'", null, null, null, null, 
		null, null, null, null, "','", null, null, "'\\uEFBBBF'", "'\\uFEFF'", 
		"'\\u0000FEFF'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "NAME", "STRING", "BLOCK_STRING", "ID", 
		"FLOAT", "INT", "PUNCTUATOR", "WS", "COMMA", "LineComment", "UNICODE_BOM", 
		"UTF8_BOM", "UTF16_BOM", "UTF32_BOM"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GraphQL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static GraphQLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GraphQLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GraphQLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class DocumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(GraphQLParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext[] definition() {
			return GetRuleContexts<DefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext definition(int i) {
			return GetRuleContext<DefinitionContext>(i);
		}
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
	}

	[RuleVersion(0)]
	public DocumentContext document() {
		DocumentContext _localctx = new DocumentContext(Context, State);
		EnterRule(_localctx, 0, RULE_document);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 146;
				definition();
				}
				}
				State = 149;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 54043203478750238L) != 0) );
			State = 151;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExecutableDocumentContext executableDocument() {
			return GetRuleContext<ExecutableDocumentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeSystemDocumentContext typeSystemDocument() {
			return GetRuleContext<TypeSystemDocumentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeSystemExtensionDocumentContext typeSystemExtensionDocument() {
			return GetRuleContext<TypeSystemExtensionDocumentContext>(0);
		}
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(Context, State);
		EnterRule(_localctx, 2, RULE_definition);
		try {
			State = 156;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__1:
			case T__2:
			case T__3:
			case T__9:
				EnterOuterAlt(_localctx, 1);
				{
				State = 153;
				executableDocument();
				}
				break;
			case T__20:
			case T__22:
			case T__23:
			case T__26:
			case T__27:
			case T__29:
			case T__30:
			case T__31:
			case STRING:
			case BLOCK_STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 154;
				typeSystemDocument();
				}
				break;
			case T__21:
				EnterOuterAlt(_localctx, 3);
				{
				State = 155;
				typeSystemExtensionDocument();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecutableDocumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExecutableDefinitionContext[] executableDefinition() {
			return GetRuleContexts<ExecutableDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExecutableDefinitionContext executableDefinition(int i) {
			return GetRuleContext<ExecutableDefinitionContext>(i);
		}
		public ExecutableDocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_executableDocument; } }
	}

	[RuleVersion(0)]
	public ExecutableDocumentContext executableDocument() {
		ExecutableDocumentContext _localctx = new ExecutableDocumentContext(Context, State);
		EnterRule(_localctx, 4, RULE_executableDocument);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 158;
					executableDefinition();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 161;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecutableDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OperationDefinitionContext operationDefinition() {
			return GetRuleContext<OperationDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FragmentDefinitionContext fragmentDefinition() {
			return GetRuleContext<FragmentDefinitionContext>(0);
		}
		public ExecutableDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_executableDefinition; } }
	}

	[RuleVersion(0)]
	public ExecutableDefinitionContext executableDefinition() {
		ExecutableDefinitionContext _localctx = new ExecutableDefinitionContext(Context, State);
		EnterRule(_localctx, 6, RULE_executableDefinition);
		try {
			State = 165;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__1:
			case T__2:
			case T__3:
				EnterOuterAlt(_localctx, 1);
				{
				State = 163;
				operationDefinition();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 2);
				{
				State = 164;
				fragmentDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OperationTypeContext operationType() {
			return GetRuleContext<OperationTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectionSetContext selectionSet() {
			return GetRuleContext<SelectionSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDefinitionsContext variableDefinitions() {
			return GetRuleContext<VariableDefinitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public OperationDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationDefinition; } }
	}

	[RuleVersion(0)]
	public OperationDefinitionContext operationDefinition() {
		OperationDefinitionContext _localctx = new OperationDefinitionContext(Context, State);
		EnterRule(_localctx, 8, RULE_operationDefinition);
		int _la;
		try {
			State = 180;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__1:
			case T__2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 167;
				operationType();
				State = 169;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NAME) {
					{
					State = 168;
					name();
					}
				}

				State = 172;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__5) {
					{
					State = 171;
					variableDefinitions();
					}
				}

				State = 175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__19) {
					{
					State = 174;
					directives();
					}
				}

				State = 177;
				selectionSet();
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				State = 179;
				selectionSet();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationTypeContext : ParserRuleContext {
		public OperationTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationType; } }
	}

	[RuleVersion(0)]
	public OperationTypeContext operationType() {
		OperationTypeContext _localctx = new OperationTypeContext(Context, State);
		EnterRule(_localctx, 10, RULE_operationType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 14L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectionSetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectionContext[] selection() {
			return GetRuleContexts<SelectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectionContext selection(int i) {
			return GetRuleContext<SelectionContext>(i);
		}
		public SelectionSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectionSet; } }
	}

	[RuleVersion(0)]
	public SelectionSetContext selectionSet() {
		SelectionSetContext _localctx = new SelectionSetContext(Context, State);
		EnterRule(_localctx, 12, RULE_selectionSet);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			Match(T__3);
			State = 186;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 185;
				selection();
				}
				}
				State = 188;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__8 || _la==NAME );
			State = 190;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FragmentSpreadContext fragmentSpread() {
			return GetRuleContext<FragmentSpreadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InlineFragmentContext inlineFragment() {
			return GetRuleContext<InlineFragmentContext>(0);
		}
		public SelectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selection; } }
	}

	[RuleVersion(0)]
	public SelectionContext selection() {
		SelectionContext _localctx = new SelectionContext(Context, State);
		EnterRule(_localctx, 14, RULE_selection);
		try {
			State = 195;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 192;
				field();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 193;
				fragmentSpread();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 194;
				inlineFragment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectionSetContext selectionSet() {
			return GetRuleContext<SelectionSetContext>(0);
		}
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 16, RULE_field);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 197;
				alias();
				}
				break;
			}
			State = 200;
			name();
			State = 202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 201;
				arguments();
				}
			}

			State = 205;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 204;
				directives();
				}
			}

			State = 208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 207;
				selectionSet();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 18, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			Match(T__5);
			State = 212;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 211;
				argument();
				}
				}
				State = 214;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==NAME );
			State = 216;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 20, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			name();
			State = 219;
			Match(T__7);
			State = 220;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public AliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias; } }
	}

	[RuleVersion(0)]
	public AliasContext alias() {
		AliasContext _localctx = new AliasContext(Context, State);
		EnterRule(_localctx, 22, RULE_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			name();
			State = 223;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FragmentSpreadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FragmentNameContext fragmentName() {
			return GetRuleContext<FragmentNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public FragmentSpreadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fragmentSpread; } }
	}

	[RuleVersion(0)]
	public FragmentSpreadContext fragmentSpread() {
		FragmentSpreadContext _localctx = new FragmentSpreadContext(Context, State);
		EnterRule(_localctx, 24, RULE_fragmentSpread);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			Match(T__8);
			State = 226;
			fragmentName();
			State = 228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 227;
				directives();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FragmentDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FragmentNameContext fragmentName() {
			return GetRuleContext<FragmentNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeConditionContext typeCondition() {
			return GetRuleContext<TypeConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectionSetContext selectionSet() {
			return GetRuleContext<SelectionSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public FragmentDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fragmentDefinition; } }
	}

	[RuleVersion(0)]
	public FragmentDefinitionContext fragmentDefinition() {
		FragmentDefinitionContext _localctx = new FragmentDefinitionContext(Context, State);
		EnterRule(_localctx, 26, RULE_fragmentDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			Match(T__9);
			State = 231;
			fragmentName();
			State = 232;
			typeCondition();
			State = 234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 233;
				directives();
				}
			}

			State = 236;
			selectionSet();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FragmentNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public FragmentNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fragmentName; } }
	}

	[RuleVersion(0)]
	public FragmentNameContext fragmentName() {
		FragmentNameContext _localctx = new FragmentNameContext(Context, State);
		EnterRule(_localctx, 28, RULE_fragmentName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamedTypeContext namedType() {
			return GetRuleContext<NamedTypeContext>(0);
		}
		public TypeConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeCondition; } }
	}

	[RuleVersion(0)]
	public TypeConditionContext typeCondition() {
		TypeConditionContext _localctx = new TypeConditionContext(Context, State);
		EnterRule(_localctx, 30, RULE_typeCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240;
			Match(T__10);
			State = 241;
			namedType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineFragmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectionSetContext selectionSet() {
			return GetRuleContext<SelectionSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeConditionContext typeCondition() {
			return GetRuleContext<TypeConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public InlineFragmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineFragment; } }
	}

	[RuleVersion(0)]
	public InlineFragmentContext inlineFragment() {
		InlineFragmentContext _localctx = new InlineFragmentContext(Context, State);
		EnterRule(_localctx, 32, RULE_inlineFragment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			Match(T__8);
			State = 245;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 244;
				typeCondition();
				}
			}

			State = 248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 247;
				directives();
				}
			}

			State = 250;
			selectionSet();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntValueContext intValue() {
			return GetRuleContext<IntValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FloatValueContext floatValue() {
			return GetRuleContext<FloatValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringValueContext stringValue() {
			return GetRuleContext<StringValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanValueContext booleanValue() {
			return GetRuleContext<BooleanValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NullValueContext nullValue() {
			return GetRuleContext<NullValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue() {
			return GetRuleContext<EnumValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListValueContext listValue() {
			return GetRuleContext<ListValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectValueContext objectValue() {
			return GetRuleContext<ObjectValueContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 34, RULE_value);
		try {
			State = 261;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__16:
				EnterOuterAlt(_localctx, 1);
				{
				State = 252;
				variable();
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 253;
				intValue();
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 254;
				floatValue();
				}
				break;
			case STRING:
			case BLOCK_STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 255;
				stringValue();
				}
				break;
			case T__11:
			case T__12:
				EnterOuterAlt(_localctx, 5);
				{
				State = 256;
				booleanValue();
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 6);
				{
				State = 257;
				nullValue();
				}
				break;
			case NAME:
				EnterOuterAlt(_localctx, 7);
				{
				State = 258;
				enumValue();
				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 8);
				{
				State = 259;
				listValue();
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 9);
				{
				State = 260;
				objectValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GraphQLParser.INT, 0); }
		public IntValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intValue; } }
	}

	[RuleVersion(0)]
	public IntValueContext intValue() {
		IntValueContext _localctx = new IntValueContext(Context, State);
		EnterRule(_localctx, 36, RULE_intValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(GraphQLParser.FLOAT, 0); }
		public FloatValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatValue; } }
	}

	[RuleVersion(0)]
	public FloatValueContext floatValue() {
		FloatValueContext _localctx = new FloatValueContext(Context, State);
		EnterRule(_localctx, 38, RULE_floatValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265;
			Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanValueContext : ParserRuleContext {
		public BooleanValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanValue; } }
	}

	[RuleVersion(0)]
	public BooleanValueContext booleanValue() {
		BooleanValueContext _localctx = new BooleanValueContext(Context, State);
		EnterRule(_localctx, 40, RULE_booleanValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			_la = TokenStream.LA(1);
			if ( !(_la==T__11 || _la==T__12) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GraphQLParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCK_STRING() { return GetToken(GraphQLParser.BLOCK_STRING, 0); }
		public StringValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringValue; } }
	}

	[RuleVersion(0)]
	public StringValueContext stringValue() {
		StringValueContext _localctx = new StringValueContext(Context, State);
		EnterRule(_localctx, 42, RULE_stringValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			_la = TokenStream.LA(1);
			if ( !(_la==STRING || _la==BLOCK_STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullValueContext : ParserRuleContext {
		public NullValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullValue; } }
	}

	[RuleVersion(0)]
	public NullValueContext nullValue() {
		NullValueContext _localctx = new NullValueContext(Context, State);
		EnterRule(_localctx, 44, RULE_nullValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public EnumValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValue; } }
	}

	[RuleVersion(0)]
	public EnumValueContext enumValue() {
		EnumValueContext _localctx = new EnumValueContext(Context, State);
		EnterRule(_localctx, 46, RULE_enumValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public ListValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listValue; } }
	}

	[RuleVersion(0)]
	public ListValueContext listValue() {
		ListValueContext _localctx = new ListValueContext(Context, State);
		EnterRule(_localctx, 48, RULE_listValue);
		int _la;
		try {
			State = 285;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 275;
				Match(T__14);
				State = 276;
				Match(T__15);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 277;
				Match(T__14);
				State = 279;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 278;
					value();
					}
					}
					State = 281;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 495395959010947088L) != 0) );
				State = 283;
				Match(T__15);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjectFieldContext[] objectField() {
			return GetRuleContexts<ObjectFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectFieldContext objectField(int i) {
			return GetRuleContext<ObjectFieldContext>(i);
		}
		public ObjectValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectValue; } }
	}

	[RuleVersion(0)]
	public ObjectValueContext objectValue() {
		ObjectValueContext _localctx = new ObjectValueContext(Context, State);
		EnterRule(_localctx, 50, RULE_objectValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287;
			Match(T__3);
			State = 291;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NAME) {
				{
				{
				State = 288;
				objectField();
				}
				}
				State = 293;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 294;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ObjectFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectField; } }
	}

	[RuleVersion(0)]
	public ObjectFieldContext objectField() {
		ObjectFieldContext _localctx = new ObjectFieldContext(Context, State);
		EnterRule(_localctx, 52, RULE_objectField);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296;
			name();
			State = 297;
			Match(T__7);
			State = 298;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 54, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			Match(T__16);
			State = 301;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDefinitionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDefinitionContext[] variableDefinition() {
			return GetRuleContexts<VariableDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDefinitionContext variableDefinition(int i) {
			return GetRuleContext<VariableDefinitionContext>(i);
		}
		public VariableDefinitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDefinitions; } }
	}

	[RuleVersion(0)]
	public VariableDefinitionsContext variableDefinitions() {
		VariableDefinitionsContext _localctx = new VariableDefinitionsContext(Context, State);
		EnterRule(_localctx, 56, RULE_variableDefinitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303;
			Match(T__5);
			State = 305;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 304;
				variableDefinition();
				}
				}
				State = 307;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__16 );
			State = 309;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultValueContext defaultValue() {
			return GetRuleContext<DefaultValueContext>(0);
		}
		public VariableDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDefinition; } }
	}

	[RuleVersion(0)]
	public VariableDefinitionContext variableDefinition() {
		VariableDefinitionContext _localctx = new VariableDefinitionContext(Context, State);
		EnterRule(_localctx, 58, RULE_variableDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			variable();
			State = 312;
			Match(T__7);
			State = 313;
			type_();
			State = 315;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 314;
				defaultValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public DefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultValue; } }
	}

	[RuleVersion(0)]
	public DefaultValueContext defaultValue() {
		DefaultValueContext _localctx = new DefaultValueContext(Context, State);
		EnterRule(_localctx, 60, RULE_defaultValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317;
			Match(T__17);
			State = 318;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamedTypeContext namedType() {
			return GetRuleContext<NamedTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListTypeContext listType() {
			return GetRuleContext<ListTypeContext>(0);
		}
		public Type_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_; } }
	}

	[RuleVersion(0)]
	public Type_Context type_() {
		Type_Context _localctx = new Type_Context(Context, State);
		EnterRule(_localctx, 62, RULE_type_);
		int _la;
		try {
			State = 328;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 320;
				namedType();
				State = 322;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__18) {
					{
					State = 321;
					Match(T__18);
					}
				}

				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 2);
				{
				State = 324;
				listType();
				State = 326;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__18) {
					{
					State = 325;
					Match(T__18);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public NamedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedType; } }
	}

	[RuleVersion(0)]
	public NamedTypeContext namedType() {
		NamedTypeContext _localctx = new NamedTypeContext(Context, State);
		EnterRule(_localctx, 64, RULE_namedType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public ListTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listType; } }
	}

	[RuleVersion(0)]
	public ListTypeContext listType() {
		ListTypeContext _localctx = new ListTypeContext(Context, State);
		EnterRule(_localctx, 66, RULE_listType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332;
			Match(T__14);
			State = 333;
			type_();
			State = 334;
			Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectivesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DirectiveContext[] directive() {
			return GetRuleContexts<DirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectiveContext directive(int i) {
			return GetRuleContext<DirectiveContext>(i);
		}
		public DirectivesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directives; } }
	}

	[RuleVersion(0)]
	public DirectivesContext directives() {
		DirectivesContext _localctx = new DirectivesContext(Context, State);
		EnterRule(_localctx, 68, RULE_directives);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 336;
				directive();
				}
				}
				State = 339;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__19 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public DirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directive; } }
	}

	[RuleVersion(0)]
	public DirectiveContext directive() {
		DirectiveContext _localctx = new DirectiveContext(Context, State);
		EnterRule(_localctx, 70, RULE_directive);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341;
			Match(T__19);
			State = 342;
			name();
			State = 344;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 343;
				arguments();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSystemDocumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeSystemDefinitionContext[] typeSystemDefinition() {
			return GetRuleContexts<TypeSystemDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeSystemDefinitionContext typeSystemDefinition(int i) {
			return GetRuleContext<TypeSystemDefinitionContext>(i);
		}
		public TypeSystemDocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSystemDocument; } }
	}

	[RuleVersion(0)]
	public TypeSystemDocumentContext typeSystemDocument() {
		TypeSystemDocumentContext _localctx = new TypeSystemDocumentContext(Context, State);
		EnterRule(_localctx, 72, RULE_typeSystemDocument);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 347;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 346;
					typeSystemDefinition();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 349;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSystemDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SchemaDefinitionContext schemaDefinition() {
			return GetRuleContext<SchemaDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDefinitionContext typeDefinition() {
			return GetRuleContext<TypeDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectiveDefinitionContext directiveDefinition() {
			return GetRuleContext<DirectiveDefinitionContext>(0);
		}
		public TypeSystemDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSystemDefinition; } }
	}

	[RuleVersion(0)]
	public TypeSystemDefinitionContext typeSystemDefinition() {
		TypeSystemDefinitionContext _localctx = new TypeSystemDefinitionContext(Context, State);
		EnterRule(_localctx, 74, RULE_typeSystemDefinition);
		try {
			State = 354;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 351;
				schemaDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 352;
				typeDefinition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 353;
				directiveDefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSystemExtensionDocumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeSystemExtensionContext[] typeSystemExtension() {
			return GetRuleContexts<TypeSystemExtensionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeSystemExtensionContext typeSystemExtension(int i) {
			return GetRuleContext<TypeSystemExtensionContext>(i);
		}
		public TypeSystemExtensionDocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSystemExtensionDocument; } }
	}

	[RuleVersion(0)]
	public TypeSystemExtensionDocumentContext typeSystemExtensionDocument() {
		TypeSystemExtensionDocumentContext _localctx = new TypeSystemExtensionDocumentContext(Context, State);
		EnterRule(_localctx, 76, RULE_typeSystemExtensionDocument);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 357;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 356;
					typeSystemExtension();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 359;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSystemExtensionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SchemaExtensionContext schemaExtension() {
			return GetRuleContext<SchemaExtensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeExtensionContext typeExtension() {
			return GetRuleContext<TypeExtensionContext>(0);
		}
		public TypeSystemExtensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSystemExtension; } }
	}

	[RuleVersion(0)]
	public TypeSystemExtensionContext typeSystemExtension() {
		TypeSystemExtensionContext _localctx = new TypeSystemExtensionContext(Context, State);
		EnterRule(_localctx, 78, RULE_typeSystemExtension);
		try {
			State = 363;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 361;
				schemaExtension();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 362;
				typeExtension();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SchemaDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RootOperationTypeDefinitionContext[] rootOperationTypeDefinition() {
			return GetRuleContexts<RootOperationTypeDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RootOperationTypeDefinitionContext rootOperationTypeDefinition(int i) {
			return GetRuleContext<RootOperationTypeDefinitionContext>(i);
		}
		public SchemaDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schemaDefinition; } }
	}

	[RuleVersion(0)]
	public SchemaDefinitionContext schemaDefinition() {
		SchemaDefinitionContext _localctx = new SchemaDefinitionContext(Context, State);
		EnterRule(_localctx, 80, RULE_schemaDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 365;
			Match(T__20);
			State = 367;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 366;
				directives();
				}
			}

			State = 369;
			Match(T__3);
			State = 371;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 370;
				rootOperationTypeDefinition();
				}
				}
				State = 373;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 14L) != 0) );
			State = 375;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RootOperationTypeDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OperationTypeContext operationType() {
			return GetRuleContext<OperationTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamedTypeContext namedType() {
			return GetRuleContext<NamedTypeContext>(0);
		}
		public RootOperationTypeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rootOperationTypeDefinition; } }
	}

	[RuleVersion(0)]
	public RootOperationTypeDefinitionContext rootOperationTypeDefinition() {
		RootOperationTypeDefinitionContext _localctx = new RootOperationTypeDefinitionContext(Context, State);
		EnterRule(_localctx, 82, RULE_rootOperationTypeDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 377;
			operationType();
			State = 378;
			Match(T__7);
			State = 379;
			namedType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SchemaExtensionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RootOperationTypeDefinitionContext[] rootOperationTypeDefinition() {
			return GetRuleContexts<RootOperationTypeDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RootOperationTypeDefinitionContext rootOperationTypeDefinition(int i) {
			return GetRuleContext<RootOperationTypeDefinitionContext>(i);
		}
		public SchemaExtensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schemaExtension; } }
	}

	[RuleVersion(0)]
	public SchemaExtensionContext schemaExtension() {
		SchemaExtensionContext _localctx = new SchemaExtensionContext(Context, State);
		EnterRule(_localctx, 84, RULE_schemaExtension);
		int _la;
		try {
			State = 397;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 381;
				Match(T__21);
				State = 382;
				Match(T__20);
				State = 384;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__19) {
					{
					State = 383;
					directives();
					}
				}

				State = 386;
				Match(T__3);
				State = 388;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 387;
					rootOperationTypeDefinition();
					}
					}
					State = 390;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 14L) != 0) );
				State = 392;
				Match(T__4);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 394;
				Match(T__21);
				State = 395;
				Match(T__20);
				State = 396;
				directives();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescriptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringValueContext stringValue() {
			return GetRuleContext<StringValueContext>(0);
		}
		public DescriptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_description; } }
	}

	[RuleVersion(0)]
	public DescriptionContext description() {
		DescriptionContext _localctx = new DescriptionContext(Context, State);
		EnterRule(_localctx, 86, RULE_description);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 399;
			stringValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ScalarTypeDefinitionContext scalarTypeDefinition() {
			return GetRuleContext<ScalarTypeDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectTypeDefinitionContext objectTypeDefinition() {
			return GetRuleContext<ObjectTypeDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceTypeDefinitionContext interfaceTypeDefinition() {
			return GetRuleContext<InterfaceTypeDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionTypeDefinitionContext unionTypeDefinition() {
			return GetRuleContext<UnionTypeDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeDefinitionContext enumTypeDefinition() {
			return GetRuleContext<EnumTypeDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InputObjectTypeDefinitionContext inputObjectTypeDefinition() {
			return GetRuleContext<InputObjectTypeDefinitionContext>(0);
		}
		public TypeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDefinition; } }
	}

	[RuleVersion(0)]
	public TypeDefinitionContext typeDefinition() {
		TypeDefinitionContext _localctx = new TypeDefinitionContext(Context, State);
		EnterRule(_localctx, 88, RULE_typeDefinition);
		try {
			State = 407;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 401;
				scalarTypeDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 402;
				objectTypeDefinition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 403;
				interfaceTypeDefinition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 404;
				unionTypeDefinition();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 405;
				enumTypeDefinition();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 406;
				inputObjectTypeDefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeExtensionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ScalarTypeExtensionContext scalarTypeExtension() {
			return GetRuleContext<ScalarTypeExtensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectTypeExtensionContext objectTypeExtension() {
			return GetRuleContext<ObjectTypeExtensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceTypeExtensionContext interfaceTypeExtension() {
			return GetRuleContext<InterfaceTypeExtensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionTypeExtensionContext unionTypeExtension() {
			return GetRuleContext<UnionTypeExtensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeExtensionContext enumTypeExtension() {
			return GetRuleContext<EnumTypeExtensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InputObjectTypeExtensionContext inputObjectTypeExtension() {
			return GetRuleContext<InputObjectTypeExtensionContext>(0);
		}
		public TypeExtensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeExtension; } }
	}

	[RuleVersion(0)]
	public TypeExtensionContext typeExtension() {
		TypeExtensionContext _localctx = new TypeExtensionContext(Context, State);
		EnterRule(_localctx, 90, RULE_typeExtension);
		try {
			State = 415;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 409;
				scalarTypeExtension();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 410;
				objectTypeExtension();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 411;
				interfaceTypeExtension();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 412;
				unionTypeExtension();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 413;
				enumTypeExtension();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 414;
				inputObjectTypeExtension();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScalarTypeDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public ScalarTypeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalarTypeDefinition; } }
	}

	[RuleVersion(0)]
	public ScalarTypeDefinitionContext scalarTypeDefinition() {
		ScalarTypeDefinitionContext _localctx = new ScalarTypeDefinitionContext(Context, State);
		EnterRule(_localctx, 92, RULE_scalarTypeDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 418;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING || _la==BLOCK_STRING) {
				{
				State = 417;
				description();
				}
			}

			State = 420;
			Match(T__22);
			State = 421;
			name();
			State = 423;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 422;
				directives();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScalarTypeExtensionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public ScalarTypeExtensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalarTypeExtension; } }
	}

	[RuleVersion(0)]
	public ScalarTypeExtensionContext scalarTypeExtension() {
		ScalarTypeExtensionContext _localctx = new ScalarTypeExtensionContext(Context, State);
		EnterRule(_localctx, 94, RULE_scalarTypeExtension);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 425;
			Match(T__21);
			State = 426;
			Match(T__22);
			State = 427;
			name();
			State = 428;
			directives();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectTypeDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImplementsInterfacesContext implementsInterfaces() {
			return GetRuleContext<ImplementsInterfacesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldsDefinitionContext fieldsDefinition() {
			return GetRuleContext<FieldsDefinitionContext>(0);
		}
		public ObjectTypeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectTypeDefinition; } }
	}

	[RuleVersion(0)]
	public ObjectTypeDefinitionContext objectTypeDefinition() {
		ObjectTypeDefinitionContext _localctx = new ObjectTypeDefinitionContext(Context, State);
		EnterRule(_localctx, 96, RULE_objectTypeDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 431;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING || _la==BLOCK_STRING) {
				{
				State = 430;
				description();
				}
			}

			State = 433;
			Match(T__23);
			State = 434;
			name();
			State = 436;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__24) {
				{
				State = 435;
				implementsInterfaces(0);
				}
			}

			State = 439;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 438;
				directives();
				}
			}

			State = 442;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				{
				State = 441;
				fieldsDefinition();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplementsInterfacesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamedTypeContext namedType() {
			return GetRuleContext<NamedTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImplementsInterfacesContext implementsInterfaces() {
			return GetRuleContext<ImplementsInterfacesContext>(0);
		}
		public ImplementsInterfacesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implementsInterfaces; } }
	}

	[RuleVersion(0)]
	public ImplementsInterfacesContext implementsInterfaces() {
		return implementsInterfaces(0);
	}

	private ImplementsInterfacesContext implementsInterfaces(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ImplementsInterfacesContext _localctx = new ImplementsInterfacesContext(Context, _parentState);
		ImplementsInterfacesContext _prevctx = _localctx;
		int _startState = 98;
		EnterRecursionRule(_localctx, 98, RULE_implementsInterfaces, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 445;
			Match(T__24);
			State = 447;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__25) {
				{
				State = 446;
				Match(T__25);
				}
			}

			State = 449;
			namedType();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 456;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ImplementsInterfacesContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_implementsInterfaces);
					State = 451;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 452;
					Match(T__25);
					State = 453;
					namedType();
					}
					} 
				}
				State = 458;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FieldsDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldDefinitionContext[] fieldDefinition() {
			return GetRuleContexts<FieldDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldDefinitionContext fieldDefinition(int i) {
			return GetRuleContext<FieldDefinitionContext>(i);
		}
		public FieldsDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldsDefinition; } }
	}

	[RuleVersion(0)]
	public FieldsDefinitionContext fieldsDefinition() {
		FieldsDefinitionContext _localctx = new FieldsDefinitionContext(Context, State);
		EnterRule(_localctx, 100, RULE_fieldsDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 459;
			Match(T__3);
			State = 461;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 460;
				fieldDefinition();
				}
				}
				State = 463;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 63050394783186944L) != 0) );
			State = 465;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsDefinitionContext argumentsDefinition() {
			return GetRuleContext<ArgumentsDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public FieldDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDefinition; } }
	}

	[RuleVersion(0)]
	public FieldDefinitionContext fieldDefinition() {
		FieldDefinitionContext _localctx = new FieldDefinitionContext(Context, State);
		EnterRule(_localctx, 102, RULE_fieldDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 468;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING || _la==BLOCK_STRING) {
				{
				State = 467;
				description();
				}
			}

			State = 470;
			name();
			State = 472;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 471;
				argumentsDefinition();
				}
			}

			State = 474;
			Match(T__7);
			State = 475;
			type_();
			State = 477;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 476;
				directives();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InputValueDefinitionContext[] inputValueDefinition() {
			return GetRuleContexts<InputValueDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InputValueDefinitionContext inputValueDefinition(int i) {
			return GetRuleContext<InputValueDefinitionContext>(i);
		}
		public ArgumentsDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentsDefinition; } }
	}

	[RuleVersion(0)]
	public ArgumentsDefinitionContext argumentsDefinition() {
		ArgumentsDefinitionContext _localctx = new ArgumentsDefinitionContext(Context, State);
		EnterRule(_localctx, 104, RULE_argumentsDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 479;
			Match(T__5);
			State = 481;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 480;
				inputValueDefinition();
				}
				}
				State = 483;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 63050394783186944L) != 0) );
			State = 485;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputValueDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultValueContext defaultValue() {
			return GetRuleContext<DefaultValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public InputValueDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputValueDefinition; } }
	}

	[RuleVersion(0)]
	public InputValueDefinitionContext inputValueDefinition() {
		InputValueDefinitionContext _localctx = new InputValueDefinitionContext(Context, State);
		EnterRule(_localctx, 106, RULE_inputValueDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 488;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING || _la==BLOCK_STRING) {
				{
				State = 487;
				description();
				}
			}

			State = 490;
			name();
			State = 491;
			Match(T__7);
			State = 492;
			type_();
			State = 494;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 493;
				defaultValue();
				}
			}

			State = 497;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 496;
				directives();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectTypeExtensionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldsDefinitionContext fieldsDefinition() {
			return GetRuleContext<FieldsDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImplementsInterfacesContext implementsInterfaces() {
			return GetRuleContext<ImplementsInterfacesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public ObjectTypeExtensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectTypeExtension; } }
	}

	[RuleVersion(0)]
	public ObjectTypeExtensionContext objectTypeExtension() {
		ObjectTypeExtensionContext _localctx = new ObjectTypeExtensionContext(Context, State);
		EnterRule(_localctx, 108, RULE_objectTypeExtension);
		int _la;
		try {
			State = 523;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 499;
				Match(T__21);
				State = 500;
				Match(T__23);
				State = 501;
				name();
				State = 503;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__24) {
					{
					State = 502;
					implementsInterfaces(0);
					}
				}

				State = 506;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__19) {
					{
					State = 505;
					directives();
					}
				}

				State = 508;
				fieldsDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 510;
				Match(T__21);
				State = 511;
				Match(T__23);
				State = 512;
				name();
				State = 514;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__24) {
					{
					State = 513;
					implementsInterfaces(0);
					}
				}

				State = 516;
				directives();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 518;
				Match(T__21);
				State = 519;
				Match(T__23);
				State = 520;
				name();
				State = 521;
				implementsInterfaces(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceTypeDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImplementsInterfacesContext implementsInterfaces() {
			return GetRuleContext<ImplementsInterfacesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldsDefinitionContext fieldsDefinition() {
			return GetRuleContext<FieldsDefinitionContext>(0);
		}
		public InterfaceTypeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceTypeDefinition; } }
	}

	[RuleVersion(0)]
	public InterfaceTypeDefinitionContext interfaceTypeDefinition() {
		InterfaceTypeDefinitionContext _localctx = new InterfaceTypeDefinitionContext(Context, State);
		EnterRule(_localctx, 110, RULE_interfaceTypeDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 526;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING || _la==BLOCK_STRING) {
				{
				State = 525;
				description();
				}
			}

			State = 528;
			Match(T__26);
			State = 529;
			name();
			State = 531;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__24) {
				{
				State = 530;
				implementsInterfaces(0);
				}
			}

			State = 534;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 533;
				directives();
				}
			}

			State = 537;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				{
				State = 536;
				fieldsDefinition();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceTypeExtensionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldsDefinitionContext fieldsDefinition() {
			return GetRuleContext<FieldsDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImplementsInterfacesContext implementsInterfaces() {
			return GetRuleContext<ImplementsInterfacesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public InterfaceTypeExtensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceTypeExtension; } }
	}

	[RuleVersion(0)]
	public InterfaceTypeExtensionContext interfaceTypeExtension() {
		InterfaceTypeExtensionContext _localctx = new InterfaceTypeExtensionContext(Context, State);
		EnterRule(_localctx, 112, RULE_interfaceTypeExtension);
		int _la;
		try {
			State = 558;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 539;
				Match(T__21);
				State = 540;
				Match(T__26);
				State = 541;
				name();
				State = 543;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__24) {
					{
					State = 542;
					implementsInterfaces(0);
					}
				}

				State = 546;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__19) {
					{
					State = 545;
					directives();
					}
				}

				State = 548;
				fieldsDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 550;
				Match(T__21);
				State = 551;
				Match(T__26);
				State = 552;
				name();
				State = 554;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__24) {
					{
					State = 553;
					implementsInterfaces(0);
					}
				}

				State = 556;
				directives();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionTypeDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionMemberTypesContext unionMemberTypes() {
			return GetRuleContext<UnionMemberTypesContext>(0);
		}
		public UnionTypeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionTypeDefinition; } }
	}

	[RuleVersion(0)]
	public UnionTypeDefinitionContext unionTypeDefinition() {
		UnionTypeDefinitionContext _localctx = new UnionTypeDefinitionContext(Context, State);
		EnterRule(_localctx, 114, RULE_unionTypeDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 561;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING || _la==BLOCK_STRING) {
				{
				State = 560;
				description();
				}
			}

			State = 563;
			Match(T__27);
			State = 564;
			name();
			State = 566;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 565;
				directives();
				}
			}

			State = 569;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 568;
				unionMemberTypes();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionMemberTypesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamedTypeContext[] namedType() {
			return GetRuleContexts<NamedTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamedTypeContext namedType(int i) {
			return GetRuleContext<NamedTypeContext>(i);
		}
		public UnionMemberTypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionMemberTypes; } }
	}

	[RuleVersion(0)]
	public UnionMemberTypesContext unionMemberTypes() {
		UnionMemberTypesContext _localctx = new UnionMemberTypesContext(Context, State);
		EnterRule(_localctx, 116, RULE_unionMemberTypes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 571;
			Match(T__17);
			State = 573;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__28) {
				{
				State = 572;
				Match(T__28);
				}
			}

			State = 575;
			namedType();
			State = 580;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__28) {
				{
				{
				State = 576;
				Match(T__28);
				State = 577;
				namedType();
				}
				}
				State = 582;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionTypeExtensionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionMemberTypesContext unionMemberTypes() {
			return GetRuleContext<UnionMemberTypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public UnionTypeExtensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionTypeExtension; } }
	}

	[RuleVersion(0)]
	public UnionTypeExtensionContext unionTypeExtension() {
		UnionTypeExtensionContext _localctx = new UnionTypeExtensionContext(Context, State);
		EnterRule(_localctx, 118, RULE_unionTypeExtension);
		int _la;
		try {
			State = 596;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 583;
				Match(T__21);
				State = 584;
				Match(T__27);
				State = 585;
				name();
				State = 587;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__19) {
					{
					State = 586;
					directives();
					}
				}

				State = 589;
				unionMemberTypes();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 591;
				Match(T__21);
				State = 592;
				Match(T__27);
				State = 593;
				name();
				State = 594;
				directives();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumTypeDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumValuesDefinitionContext enumValuesDefinition() {
			return GetRuleContext<EnumValuesDefinitionContext>(0);
		}
		public EnumTypeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumTypeDefinition; } }
	}

	[RuleVersion(0)]
	public EnumTypeDefinitionContext enumTypeDefinition() {
		EnumTypeDefinitionContext _localctx = new EnumTypeDefinitionContext(Context, State);
		EnterRule(_localctx, 120, RULE_enumTypeDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 599;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING || _la==BLOCK_STRING) {
				{
				State = 598;
				description();
				}
			}

			State = 601;
			Match(T__29);
			State = 602;
			name();
			State = 604;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 603;
				directives();
				}
			}

			State = 607;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
			case 1:
				{
				State = 606;
				enumValuesDefinition();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValuesDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueDefinitionContext[] enumValueDefinition() {
			return GetRuleContexts<EnumValueDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueDefinitionContext enumValueDefinition(int i) {
			return GetRuleContext<EnumValueDefinitionContext>(i);
		}
		public EnumValuesDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValuesDefinition; } }
	}

	[RuleVersion(0)]
	public EnumValuesDefinitionContext enumValuesDefinition() {
		EnumValuesDefinitionContext _localctx = new EnumValuesDefinitionContext(Context, State);
		EnterRule(_localctx, 122, RULE_enumValuesDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 609;
			Match(T__3);
			State = 611;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 610;
				enumValueDefinition();
				}
				}
				State = 613;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 63050394783186944L) != 0) );
			State = 615;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue() {
			return GetRuleContext<EnumValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public EnumValueDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValueDefinition; } }
	}

	[RuleVersion(0)]
	public EnumValueDefinitionContext enumValueDefinition() {
		EnumValueDefinitionContext _localctx = new EnumValueDefinitionContext(Context, State);
		EnterRule(_localctx, 124, RULE_enumValueDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 618;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING || _la==BLOCK_STRING) {
				{
				State = 617;
				description();
				}
			}

			State = 620;
			enumValue();
			State = 622;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 621;
				directives();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumTypeExtensionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumValuesDefinitionContext enumValuesDefinition() {
			return GetRuleContext<EnumValuesDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public EnumTypeExtensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumTypeExtension; } }
	}

	[RuleVersion(0)]
	public EnumTypeExtensionContext enumTypeExtension() {
		EnumTypeExtensionContext _localctx = new EnumTypeExtensionContext(Context, State);
		EnterRule(_localctx, 126, RULE_enumTypeExtension);
		int _la;
		try {
			State = 637;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 624;
				Match(T__21);
				State = 625;
				Match(T__29);
				State = 626;
				name();
				State = 628;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__19) {
					{
					State = 627;
					directives();
					}
				}

				State = 630;
				enumValuesDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 632;
				Match(T__21);
				State = 633;
				Match(T__29);
				State = 634;
				name();
				State = 635;
				directives();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputObjectTypeDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InputFieldsDefinitionContext inputFieldsDefinition() {
			return GetRuleContext<InputFieldsDefinitionContext>(0);
		}
		public InputObjectTypeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputObjectTypeDefinition; } }
	}

	[RuleVersion(0)]
	public InputObjectTypeDefinitionContext inputObjectTypeDefinition() {
		InputObjectTypeDefinitionContext _localctx = new InputObjectTypeDefinitionContext(Context, State);
		EnterRule(_localctx, 128, RULE_inputObjectTypeDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 640;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING || _la==BLOCK_STRING) {
				{
				State = 639;
				description();
				}
			}

			State = 642;
			Match(T__30);
			State = 643;
			name();
			State = 645;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 644;
				directives();
				}
			}

			State = 648;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
			case 1:
				{
				State = 647;
				inputFieldsDefinition();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputFieldsDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InputValueDefinitionContext[] inputValueDefinition() {
			return GetRuleContexts<InputValueDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InputValueDefinitionContext inputValueDefinition(int i) {
			return GetRuleContext<InputValueDefinitionContext>(i);
		}
		public InputFieldsDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputFieldsDefinition; } }
	}

	[RuleVersion(0)]
	public InputFieldsDefinitionContext inputFieldsDefinition() {
		InputFieldsDefinitionContext _localctx = new InputFieldsDefinitionContext(Context, State);
		EnterRule(_localctx, 130, RULE_inputFieldsDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 650;
			Match(T__3);
			State = 652;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 651;
				inputValueDefinition();
				}
				}
				State = 654;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 63050394783186944L) != 0) );
			State = 656;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputObjectTypeExtensionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InputFieldsDefinitionContext inputFieldsDefinition() {
			return GetRuleContext<InputFieldsDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectivesContext directives() {
			return GetRuleContext<DirectivesContext>(0);
		}
		public InputObjectTypeExtensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputObjectTypeExtension; } }
	}

	[RuleVersion(0)]
	public InputObjectTypeExtensionContext inputObjectTypeExtension() {
		InputObjectTypeExtensionContext _localctx = new InputObjectTypeExtensionContext(Context, State);
		EnterRule(_localctx, 132, RULE_inputObjectTypeExtension);
		int _la;
		try {
			State = 671;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 658;
				Match(T__21);
				State = 659;
				Match(T__30);
				State = 660;
				name();
				State = 662;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__19) {
					{
					State = 661;
					directives();
					}
				}

				State = 664;
				inputFieldsDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 666;
				Match(T__21);
				State = 667;
				Match(T__30);
				State = 668;
				name();
				State = 669;
				directives();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectiveLocationsContext directiveLocations() {
			return GetRuleContext<DirectiveLocationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsDefinitionContext argumentsDefinition() {
			return GetRuleContext<ArgumentsDefinitionContext>(0);
		}
		public DirectiveDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directiveDefinition; } }
	}

	[RuleVersion(0)]
	public DirectiveDefinitionContext directiveDefinition() {
		DirectiveDefinitionContext _localctx = new DirectiveDefinitionContext(Context, State);
		EnterRule(_localctx, 134, RULE_directiveDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 674;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING || _la==BLOCK_STRING) {
				{
				State = 673;
				description();
				}
			}

			State = 676;
			Match(T__31);
			State = 677;
			Match(T__19);
			State = 678;
			name();
			State = 680;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 679;
				argumentsDefinition();
				}
			}

			State = 683;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__32) {
				{
				State = 682;
				Match(T__32);
				}
			}

			State = 685;
			Match(T__10);
			State = 686;
			directiveLocations();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveLocationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DirectiveLocationContext[] directiveLocation() {
			return GetRuleContexts<DirectiveLocationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectiveLocationContext directiveLocation(int i) {
			return GetRuleContext<DirectiveLocationContext>(i);
		}
		public DirectiveLocationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directiveLocations; } }
	}

	[RuleVersion(0)]
	public DirectiveLocationsContext directiveLocations() {
		DirectiveLocationsContext _localctx = new DirectiveLocationsContext(Context, State);
		EnterRule(_localctx, 136, RULE_directiveLocations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 688;
			directiveLocation();
			State = 693;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__28) {
				{
				{
				State = 689;
				Match(T__28);
				State = 690;
				directiveLocation();
				}
				}
				State = 695;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExecutableDirectiveLocationContext executableDirectiveLocation() {
			return GetRuleContext<ExecutableDirectiveLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeSystemDirectiveLocationContext typeSystemDirectiveLocation() {
			return GetRuleContext<TypeSystemDirectiveLocationContext>(0);
		}
		public DirectiveLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directiveLocation; } }
	}

	[RuleVersion(0)]
	public DirectiveLocationContext directiveLocation() {
		DirectiveLocationContext _localctx = new DirectiveLocationContext(Context, State);
		EnterRule(_localctx, 138, RULE_directiveLocation);
		try {
			State = 698;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__33:
			case T__34:
			case T__35:
			case T__36:
			case T__37:
			case T__38:
			case T__39:
			case T__40:
				EnterOuterAlt(_localctx, 1);
				{
				State = 696;
				executableDirectiveLocation();
				}
				break;
			case T__41:
			case T__42:
			case T__43:
			case T__44:
			case T__45:
			case T__46:
			case T__47:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
				EnterOuterAlt(_localctx, 2);
				{
				State = 697;
				typeSystemDirectiveLocation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecutableDirectiveLocationContext : ParserRuleContext {
		public ExecutableDirectiveLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_executableDirectiveLocation; } }
	}

	[RuleVersion(0)]
	public ExecutableDirectiveLocationContext executableDirectiveLocation() {
		ExecutableDirectiveLocationContext _localctx = new ExecutableDirectiveLocationContext(Context, State);
		EnterRule(_localctx, 140, RULE_executableDirectiveLocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 700;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4380866641920L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSystemDirectiveLocationContext : ParserRuleContext {
		public TypeSystemDirectiveLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSystemDirectiveLocation; } }
	}

	[RuleVersion(0)]
	public TypeSystemDirectiveLocationContext typeSystemDirectiveLocation() {
		TypeSystemDirectiveLocationContext _localctx = new TypeSystemDirectiveLocationContext(Context, State);
		EnterRule(_localctx, 142, RULE_typeSystemDirectiveLocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 702;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9002801208229888L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(GraphQLParser.NAME, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 144, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 704;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 49: return implementsInterfaces_sempred((ImplementsInterfacesContext)_localctx, predIndex);
		}
		return true;
	}
	private bool implementsInterfaces_sempred(ImplementsInterfacesContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,66,707,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,1,0,4,0,148,8,0,11,0,12,0,149,1,0,1,0,1,1,1,1,1,1,
		3,1,157,8,1,1,2,4,2,160,8,2,11,2,12,2,161,1,3,1,3,3,3,166,8,3,1,4,1,4,
		3,4,170,8,4,1,4,3,4,173,8,4,1,4,3,4,176,8,4,1,4,1,4,1,4,3,4,181,8,4,1,
		5,1,5,1,6,1,6,4,6,187,8,6,11,6,12,6,188,1,6,1,6,1,7,1,7,1,7,3,7,196,8,
		7,1,8,3,8,199,8,8,1,8,1,8,3,8,203,8,8,1,8,3,8,206,8,8,1,8,3,8,209,8,8,
		1,9,1,9,4,9,213,8,9,11,9,12,9,214,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,
		1,11,1,12,1,12,1,12,3,12,229,8,12,1,13,1,13,1,13,1,13,3,13,235,8,13,1,
		13,1,13,1,14,1,14,1,15,1,15,1,15,1,16,1,16,3,16,246,8,16,1,16,3,16,249,
		8,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,262,8,
		17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,
		24,1,24,1,24,4,24,280,8,24,11,24,12,24,281,1,24,1,24,3,24,286,8,24,1,25,
		1,25,5,25,290,8,25,10,25,12,25,293,9,25,1,25,1,25,1,26,1,26,1,26,1,26,
		1,27,1,27,1,27,1,28,1,28,4,28,306,8,28,11,28,12,28,307,1,28,1,28,1,29,
		1,29,1,29,1,29,3,29,316,8,29,1,30,1,30,1,30,1,31,1,31,3,31,323,8,31,1,
		31,1,31,3,31,327,8,31,3,31,329,8,31,1,32,1,32,1,33,1,33,1,33,1,33,1,34,
		4,34,338,8,34,11,34,12,34,339,1,35,1,35,1,35,3,35,345,8,35,1,36,4,36,348,
		8,36,11,36,12,36,349,1,37,1,37,1,37,3,37,355,8,37,1,38,4,38,358,8,38,11,
		38,12,38,359,1,39,1,39,3,39,364,8,39,1,40,1,40,3,40,368,8,40,1,40,1,40,
		4,40,372,8,40,11,40,12,40,373,1,40,1,40,1,41,1,41,1,41,1,41,1,42,1,42,
		1,42,3,42,385,8,42,1,42,1,42,4,42,389,8,42,11,42,12,42,390,1,42,1,42,1,
		42,1,42,1,42,3,42,398,8,42,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,3,44,
		408,8,44,1,45,1,45,1,45,1,45,1,45,1,45,3,45,416,8,45,1,46,3,46,419,8,46,
		1,46,1,46,1,46,3,46,424,8,46,1,47,1,47,1,47,1,47,1,47,1,48,3,48,432,8,
		48,1,48,1,48,1,48,3,48,437,8,48,1,48,3,48,440,8,48,1,48,3,48,443,8,48,
		1,49,1,49,1,49,3,49,448,8,49,1,49,1,49,1,49,1,49,1,49,5,49,455,8,49,10,
		49,12,49,458,9,49,1,50,1,50,4,50,462,8,50,11,50,12,50,463,1,50,1,50,1,
		51,3,51,469,8,51,1,51,1,51,3,51,473,8,51,1,51,1,51,1,51,3,51,478,8,51,
		1,52,1,52,4,52,482,8,52,11,52,12,52,483,1,52,1,52,1,53,3,53,489,8,53,1,
		53,1,53,1,53,1,53,3,53,495,8,53,1,53,3,53,498,8,53,1,54,1,54,1,54,1,54,
		3,54,504,8,54,1,54,3,54,507,8,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,515,
		8,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,524,8,54,1,55,3,55,527,8,
		55,1,55,1,55,1,55,3,55,532,8,55,1,55,3,55,535,8,55,1,55,3,55,538,8,55,
		1,56,1,56,1,56,1,56,3,56,544,8,56,1,56,3,56,547,8,56,1,56,1,56,1,56,1,
		56,1,56,1,56,3,56,555,8,56,1,56,1,56,3,56,559,8,56,1,57,3,57,562,8,57,
		1,57,1,57,1,57,3,57,567,8,57,1,57,3,57,570,8,57,1,58,1,58,3,58,574,8,58,
		1,58,1,58,1,58,5,58,579,8,58,10,58,12,58,582,9,58,1,59,1,59,1,59,1,59,
		3,59,588,8,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,597,8,59,1,60,3,
		60,600,8,60,1,60,1,60,1,60,3,60,605,8,60,1,60,3,60,608,8,60,1,61,1,61,
		4,61,612,8,61,11,61,12,61,613,1,61,1,61,1,62,3,62,619,8,62,1,62,1,62,3,
		62,623,8,62,1,63,1,63,1,63,1,63,3,63,629,8,63,1,63,1,63,1,63,1,63,1,63,
		1,63,1,63,3,63,638,8,63,1,64,3,64,641,8,64,1,64,1,64,1,64,3,64,646,8,64,
		1,64,3,64,649,8,64,1,65,1,65,4,65,653,8,65,11,65,12,65,654,1,65,1,65,1,
		66,1,66,1,66,1,66,3,66,663,8,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,3,66,
		672,8,66,1,67,3,67,675,8,67,1,67,1,67,1,67,1,67,3,67,681,8,67,1,67,3,67,
		684,8,67,1,67,1,67,1,67,1,68,1,68,1,68,5,68,692,8,68,10,68,12,68,695,9,
		68,1,69,1,69,3,69,699,8,69,1,70,1,70,1,71,1,71,1,72,1,72,1,72,0,1,98,73,
		0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,
		50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,
		98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,
		134,136,138,140,142,144,0,5,1,0,1,3,1,0,12,13,1,0,54,55,1,0,34,41,1,0,
		42,52,747,0,147,1,0,0,0,2,156,1,0,0,0,4,159,1,0,0,0,6,165,1,0,0,0,8,180,
		1,0,0,0,10,182,1,0,0,0,12,184,1,0,0,0,14,195,1,0,0,0,16,198,1,0,0,0,18,
		210,1,0,0,0,20,218,1,0,0,0,22,222,1,0,0,0,24,225,1,0,0,0,26,230,1,0,0,
		0,28,238,1,0,0,0,30,240,1,0,0,0,32,243,1,0,0,0,34,261,1,0,0,0,36,263,1,
		0,0,0,38,265,1,0,0,0,40,267,1,0,0,0,42,269,1,0,0,0,44,271,1,0,0,0,46,273,
		1,0,0,0,48,285,1,0,0,0,50,287,1,0,0,0,52,296,1,0,0,0,54,300,1,0,0,0,56,
		303,1,0,0,0,58,311,1,0,0,0,60,317,1,0,0,0,62,328,1,0,0,0,64,330,1,0,0,
		0,66,332,1,0,0,0,68,337,1,0,0,0,70,341,1,0,0,0,72,347,1,0,0,0,74,354,1,
		0,0,0,76,357,1,0,0,0,78,363,1,0,0,0,80,365,1,0,0,0,82,377,1,0,0,0,84,397,
		1,0,0,0,86,399,1,0,0,0,88,407,1,0,0,0,90,415,1,0,0,0,92,418,1,0,0,0,94,
		425,1,0,0,0,96,431,1,0,0,0,98,444,1,0,0,0,100,459,1,0,0,0,102,468,1,0,
		0,0,104,479,1,0,0,0,106,488,1,0,0,0,108,523,1,0,0,0,110,526,1,0,0,0,112,
		558,1,0,0,0,114,561,1,0,0,0,116,571,1,0,0,0,118,596,1,0,0,0,120,599,1,
		0,0,0,122,609,1,0,0,0,124,618,1,0,0,0,126,637,1,0,0,0,128,640,1,0,0,0,
		130,650,1,0,0,0,132,671,1,0,0,0,134,674,1,0,0,0,136,688,1,0,0,0,138,698,
		1,0,0,0,140,700,1,0,0,0,142,702,1,0,0,0,144,704,1,0,0,0,146,148,3,2,1,
		0,147,146,1,0,0,0,148,149,1,0,0,0,149,147,1,0,0,0,149,150,1,0,0,0,150,
		151,1,0,0,0,151,152,5,0,0,1,152,1,1,0,0,0,153,157,3,4,2,0,154,157,3,72,
		36,0,155,157,3,76,38,0,156,153,1,0,0,0,156,154,1,0,0,0,156,155,1,0,0,0,
		157,3,1,0,0,0,158,160,3,6,3,0,159,158,1,0,0,0,160,161,1,0,0,0,161,159,
		1,0,0,0,161,162,1,0,0,0,162,5,1,0,0,0,163,166,3,8,4,0,164,166,3,26,13,
		0,165,163,1,0,0,0,165,164,1,0,0,0,166,7,1,0,0,0,167,169,3,10,5,0,168,170,
		3,144,72,0,169,168,1,0,0,0,169,170,1,0,0,0,170,172,1,0,0,0,171,173,3,56,
		28,0,172,171,1,0,0,0,172,173,1,0,0,0,173,175,1,0,0,0,174,176,3,68,34,0,
		175,174,1,0,0,0,175,176,1,0,0,0,176,177,1,0,0,0,177,178,3,12,6,0,178,181,
		1,0,0,0,179,181,3,12,6,0,180,167,1,0,0,0,180,179,1,0,0,0,181,9,1,0,0,0,
		182,183,7,0,0,0,183,11,1,0,0,0,184,186,5,4,0,0,185,187,3,14,7,0,186,185,
		1,0,0,0,187,188,1,0,0,0,188,186,1,0,0,0,188,189,1,0,0,0,189,190,1,0,0,
		0,190,191,5,5,0,0,191,13,1,0,0,0,192,196,3,16,8,0,193,196,3,24,12,0,194,
		196,3,32,16,0,195,192,1,0,0,0,195,193,1,0,0,0,195,194,1,0,0,0,196,15,1,
		0,0,0,197,199,3,22,11,0,198,197,1,0,0,0,198,199,1,0,0,0,199,200,1,0,0,
		0,200,202,3,144,72,0,201,203,3,18,9,0,202,201,1,0,0,0,202,203,1,0,0,0,
		203,205,1,0,0,0,204,206,3,68,34,0,205,204,1,0,0,0,205,206,1,0,0,0,206,
		208,1,0,0,0,207,209,3,12,6,0,208,207,1,0,0,0,208,209,1,0,0,0,209,17,1,
		0,0,0,210,212,5,6,0,0,211,213,3,20,10,0,212,211,1,0,0,0,213,214,1,0,0,
		0,214,212,1,0,0,0,214,215,1,0,0,0,215,216,1,0,0,0,216,217,5,7,0,0,217,
		19,1,0,0,0,218,219,3,144,72,0,219,220,5,8,0,0,220,221,3,34,17,0,221,21,
		1,0,0,0,222,223,3,144,72,0,223,224,5,8,0,0,224,23,1,0,0,0,225,226,5,9,
		0,0,226,228,3,28,14,0,227,229,3,68,34,0,228,227,1,0,0,0,228,229,1,0,0,
		0,229,25,1,0,0,0,230,231,5,10,0,0,231,232,3,28,14,0,232,234,3,30,15,0,
		233,235,3,68,34,0,234,233,1,0,0,0,234,235,1,0,0,0,235,236,1,0,0,0,236,
		237,3,12,6,0,237,27,1,0,0,0,238,239,3,144,72,0,239,29,1,0,0,0,240,241,
		5,11,0,0,241,242,3,64,32,0,242,31,1,0,0,0,243,245,5,9,0,0,244,246,3,30,
		15,0,245,244,1,0,0,0,245,246,1,0,0,0,246,248,1,0,0,0,247,249,3,68,34,0,
		248,247,1,0,0,0,248,249,1,0,0,0,249,250,1,0,0,0,250,251,3,12,6,0,251,33,
		1,0,0,0,252,262,3,54,27,0,253,262,3,36,18,0,254,262,3,38,19,0,255,262,
		3,42,21,0,256,262,3,40,20,0,257,262,3,44,22,0,258,262,3,46,23,0,259,262,
		3,48,24,0,260,262,3,50,25,0,261,252,1,0,0,0,261,253,1,0,0,0,261,254,1,
		0,0,0,261,255,1,0,0,0,261,256,1,0,0,0,261,257,1,0,0,0,261,258,1,0,0,0,
		261,259,1,0,0,0,261,260,1,0,0,0,262,35,1,0,0,0,263,264,5,58,0,0,264,37,
		1,0,0,0,265,266,5,57,0,0,266,39,1,0,0,0,267,268,7,1,0,0,268,41,1,0,0,0,
		269,270,7,2,0,0,270,43,1,0,0,0,271,272,5,14,0,0,272,45,1,0,0,0,273,274,
		3,144,72,0,274,47,1,0,0,0,275,276,5,15,0,0,276,286,5,16,0,0,277,279,5,
		15,0,0,278,280,3,34,17,0,279,278,1,0,0,0,280,281,1,0,0,0,281,279,1,0,0,
		0,281,282,1,0,0,0,282,283,1,0,0,0,283,284,5,16,0,0,284,286,1,0,0,0,285,
		275,1,0,0,0,285,277,1,0,0,0,286,49,1,0,0,0,287,291,5,4,0,0,288,290,3,52,
		26,0,289,288,1,0,0,0,290,293,1,0,0,0,291,289,1,0,0,0,291,292,1,0,0,0,292,
		294,1,0,0,0,293,291,1,0,0,0,294,295,5,5,0,0,295,51,1,0,0,0,296,297,3,144,
		72,0,297,298,5,8,0,0,298,299,3,34,17,0,299,53,1,0,0,0,300,301,5,17,0,0,
		301,302,3,144,72,0,302,55,1,0,0,0,303,305,5,6,0,0,304,306,3,58,29,0,305,
		304,1,0,0,0,306,307,1,0,0,0,307,305,1,0,0,0,307,308,1,0,0,0,308,309,1,
		0,0,0,309,310,5,7,0,0,310,57,1,0,0,0,311,312,3,54,27,0,312,313,5,8,0,0,
		313,315,3,62,31,0,314,316,3,60,30,0,315,314,1,0,0,0,315,316,1,0,0,0,316,
		59,1,0,0,0,317,318,5,18,0,0,318,319,3,34,17,0,319,61,1,0,0,0,320,322,3,
		64,32,0,321,323,5,19,0,0,322,321,1,0,0,0,322,323,1,0,0,0,323,329,1,0,0,
		0,324,326,3,66,33,0,325,327,5,19,0,0,326,325,1,0,0,0,326,327,1,0,0,0,327,
		329,1,0,0,0,328,320,1,0,0,0,328,324,1,0,0,0,329,63,1,0,0,0,330,331,3,144,
		72,0,331,65,1,0,0,0,332,333,5,15,0,0,333,334,3,62,31,0,334,335,5,16,0,
		0,335,67,1,0,0,0,336,338,3,70,35,0,337,336,1,0,0,0,338,339,1,0,0,0,339,
		337,1,0,0,0,339,340,1,0,0,0,340,69,1,0,0,0,341,342,5,20,0,0,342,344,3,
		144,72,0,343,345,3,18,9,0,344,343,1,0,0,0,344,345,1,0,0,0,345,71,1,0,0,
		0,346,348,3,74,37,0,347,346,1,0,0,0,348,349,1,0,0,0,349,347,1,0,0,0,349,
		350,1,0,0,0,350,73,1,0,0,0,351,355,3,80,40,0,352,355,3,88,44,0,353,355,
		3,134,67,0,354,351,1,0,0,0,354,352,1,0,0,0,354,353,1,0,0,0,355,75,1,0,
		0,0,356,358,3,78,39,0,357,356,1,0,0,0,358,359,1,0,0,0,359,357,1,0,0,0,
		359,360,1,0,0,0,360,77,1,0,0,0,361,364,3,84,42,0,362,364,3,90,45,0,363,
		361,1,0,0,0,363,362,1,0,0,0,364,79,1,0,0,0,365,367,5,21,0,0,366,368,3,
		68,34,0,367,366,1,0,0,0,367,368,1,0,0,0,368,369,1,0,0,0,369,371,5,4,0,
		0,370,372,3,82,41,0,371,370,1,0,0,0,372,373,1,0,0,0,373,371,1,0,0,0,373,
		374,1,0,0,0,374,375,1,0,0,0,375,376,5,5,0,0,376,81,1,0,0,0,377,378,3,10,
		5,0,378,379,5,8,0,0,379,380,3,64,32,0,380,83,1,0,0,0,381,382,5,22,0,0,
		382,384,5,21,0,0,383,385,3,68,34,0,384,383,1,0,0,0,384,385,1,0,0,0,385,
		386,1,0,0,0,386,388,5,4,0,0,387,389,3,82,41,0,388,387,1,0,0,0,389,390,
		1,0,0,0,390,388,1,0,0,0,390,391,1,0,0,0,391,392,1,0,0,0,392,393,5,5,0,
		0,393,398,1,0,0,0,394,395,5,22,0,0,395,396,5,21,0,0,396,398,3,68,34,0,
		397,381,1,0,0,0,397,394,1,0,0,0,398,85,1,0,0,0,399,400,3,42,21,0,400,87,
		1,0,0,0,401,408,3,92,46,0,402,408,3,96,48,0,403,408,3,110,55,0,404,408,
		3,114,57,0,405,408,3,120,60,0,406,408,3,128,64,0,407,401,1,0,0,0,407,402,
		1,0,0,0,407,403,1,0,0,0,407,404,1,0,0,0,407,405,1,0,0,0,407,406,1,0,0,
		0,408,89,1,0,0,0,409,416,3,94,47,0,410,416,3,108,54,0,411,416,3,112,56,
		0,412,416,3,118,59,0,413,416,3,126,63,0,414,416,3,132,66,0,415,409,1,0,
		0,0,415,410,1,0,0,0,415,411,1,0,0,0,415,412,1,0,0,0,415,413,1,0,0,0,415,
		414,1,0,0,0,416,91,1,0,0,0,417,419,3,86,43,0,418,417,1,0,0,0,418,419,1,
		0,0,0,419,420,1,0,0,0,420,421,5,23,0,0,421,423,3,144,72,0,422,424,3,68,
		34,0,423,422,1,0,0,0,423,424,1,0,0,0,424,93,1,0,0,0,425,426,5,22,0,0,426,
		427,5,23,0,0,427,428,3,144,72,0,428,429,3,68,34,0,429,95,1,0,0,0,430,432,
		3,86,43,0,431,430,1,0,0,0,431,432,1,0,0,0,432,433,1,0,0,0,433,434,5,24,
		0,0,434,436,3,144,72,0,435,437,3,98,49,0,436,435,1,0,0,0,436,437,1,0,0,
		0,437,439,1,0,0,0,438,440,3,68,34,0,439,438,1,0,0,0,439,440,1,0,0,0,440,
		442,1,0,0,0,441,443,3,100,50,0,442,441,1,0,0,0,442,443,1,0,0,0,443,97,
		1,0,0,0,444,445,6,49,-1,0,445,447,5,25,0,0,446,448,5,26,0,0,447,446,1,
		0,0,0,447,448,1,0,0,0,448,449,1,0,0,0,449,450,3,64,32,0,450,456,1,0,0,
		0,451,452,10,1,0,0,452,453,5,26,0,0,453,455,3,64,32,0,454,451,1,0,0,0,
		455,458,1,0,0,0,456,454,1,0,0,0,456,457,1,0,0,0,457,99,1,0,0,0,458,456,
		1,0,0,0,459,461,5,4,0,0,460,462,3,102,51,0,461,460,1,0,0,0,462,463,1,0,
		0,0,463,461,1,0,0,0,463,464,1,0,0,0,464,465,1,0,0,0,465,466,5,5,0,0,466,
		101,1,0,0,0,467,469,3,86,43,0,468,467,1,0,0,0,468,469,1,0,0,0,469,470,
		1,0,0,0,470,472,3,144,72,0,471,473,3,104,52,0,472,471,1,0,0,0,472,473,
		1,0,0,0,473,474,1,0,0,0,474,475,5,8,0,0,475,477,3,62,31,0,476,478,3,68,
		34,0,477,476,1,0,0,0,477,478,1,0,0,0,478,103,1,0,0,0,479,481,5,6,0,0,480,
		482,3,106,53,0,481,480,1,0,0,0,482,483,1,0,0,0,483,481,1,0,0,0,483,484,
		1,0,0,0,484,485,1,0,0,0,485,486,5,7,0,0,486,105,1,0,0,0,487,489,3,86,43,
		0,488,487,1,0,0,0,488,489,1,0,0,0,489,490,1,0,0,0,490,491,3,144,72,0,491,
		492,5,8,0,0,492,494,3,62,31,0,493,495,3,60,30,0,494,493,1,0,0,0,494,495,
		1,0,0,0,495,497,1,0,0,0,496,498,3,68,34,0,497,496,1,0,0,0,497,498,1,0,
		0,0,498,107,1,0,0,0,499,500,5,22,0,0,500,501,5,24,0,0,501,503,3,144,72,
		0,502,504,3,98,49,0,503,502,1,0,0,0,503,504,1,0,0,0,504,506,1,0,0,0,505,
		507,3,68,34,0,506,505,1,0,0,0,506,507,1,0,0,0,507,508,1,0,0,0,508,509,
		3,100,50,0,509,524,1,0,0,0,510,511,5,22,0,0,511,512,5,24,0,0,512,514,3,
		144,72,0,513,515,3,98,49,0,514,513,1,0,0,0,514,515,1,0,0,0,515,516,1,0,
		0,0,516,517,3,68,34,0,517,524,1,0,0,0,518,519,5,22,0,0,519,520,5,24,0,
		0,520,521,3,144,72,0,521,522,3,98,49,0,522,524,1,0,0,0,523,499,1,0,0,0,
		523,510,1,0,0,0,523,518,1,0,0,0,524,109,1,0,0,0,525,527,3,86,43,0,526,
		525,1,0,0,0,526,527,1,0,0,0,527,528,1,0,0,0,528,529,5,27,0,0,529,531,3,
		144,72,0,530,532,3,98,49,0,531,530,1,0,0,0,531,532,1,0,0,0,532,534,1,0,
		0,0,533,535,3,68,34,0,534,533,1,0,0,0,534,535,1,0,0,0,535,537,1,0,0,0,
		536,538,3,100,50,0,537,536,1,0,0,0,537,538,1,0,0,0,538,111,1,0,0,0,539,
		540,5,22,0,0,540,541,5,27,0,0,541,543,3,144,72,0,542,544,3,98,49,0,543,
		542,1,0,0,0,543,544,1,0,0,0,544,546,1,0,0,0,545,547,3,68,34,0,546,545,
		1,0,0,0,546,547,1,0,0,0,547,548,1,0,0,0,548,549,3,100,50,0,549,559,1,0,
		0,0,550,551,5,22,0,0,551,552,5,27,0,0,552,554,3,144,72,0,553,555,3,98,
		49,0,554,553,1,0,0,0,554,555,1,0,0,0,555,556,1,0,0,0,556,557,3,68,34,0,
		557,559,1,0,0,0,558,539,1,0,0,0,558,550,1,0,0,0,559,113,1,0,0,0,560,562,
		3,86,43,0,561,560,1,0,0,0,561,562,1,0,0,0,562,563,1,0,0,0,563,564,5,28,
		0,0,564,566,3,144,72,0,565,567,3,68,34,0,566,565,1,0,0,0,566,567,1,0,0,
		0,567,569,1,0,0,0,568,570,3,116,58,0,569,568,1,0,0,0,569,570,1,0,0,0,570,
		115,1,0,0,0,571,573,5,18,0,0,572,574,5,29,0,0,573,572,1,0,0,0,573,574,
		1,0,0,0,574,575,1,0,0,0,575,580,3,64,32,0,576,577,5,29,0,0,577,579,3,64,
		32,0,578,576,1,0,0,0,579,582,1,0,0,0,580,578,1,0,0,0,580,581,1,0,0,0,581,
		117,1,0,0,0,582,580,1,0,0,0,583,584,5,22,0,0,584,585,5,28,0,0,585,587,
		3,144,72,0,586,588,3,68,34,0,587,586,1,0,0,0,587,588,1,0,0,0,588,589,1,
		0,0,0,589,590,3,116,58,0,590,597,1,0,0,0,591,592,5,22,0,0,592,593,5,28,
		0,0,593,594,3,144,72,0,594,595,3,68,34,0,595,597,1,0,0,0,596,583,1,0,0,
		0,596,591,1,0,0,0,597,119,1,0,0,0,598,600,3,86,43,0,599,598,1,0,0,0,599,
		600,1,0,0,0,600,601,1,0,0,0,601,602,5,30,0,0,602,604,3,144,72,0,603,605,
		3,68,34,0,604,603,1,0,0,0,604,605,1,0,0,0,605,607,1,0,0,0,606,608,3,122,
		61,0,607,606,1,0,0,0,607,608,1,0,0,0,608,121,1,0,0,0,609,611,5,4,0,0,610,
		612,3,124,62,0,611,610,1,0,0,0,612,613,1,0,0,0,613,611,1,0,0,0,613,614,
		1,0,0,0,614,615,1,0,0,0,615,616,5,5,0,0,616,123,1,0,0,0,617,619,3,86,43,
		0,618,617,1,0,0,0,618,619,1,0,0,0,619,620,1,0,0,0,620,622,3,46,23,0,621,
		623,3,68,34,0,622,621,1,0,0,0,622,623,1,0,0,0,623,125,1,0,0,0,624,625,
		5,22,0,0,625,626,5,30,0,0,626,628,3,144,72,0,627,629,3,68,34,0,628,627,
		1,0,0,0,628,629,1,0,0,0,629,630,1,0,0,0,630,631,3,122,61,0,631,638,1,0,
		0,0,632,633,5,22,0,0,633,634,5,30,0,0,634,635,3,144,72,0,635,636,3,68,
		34,0,636,638,1,0,0,0,637,624,1,0,0,0,637,632,1,0,0,0,638,127,1,0,0,0,639,
		641,3,86,43,0,640,639,1,0,0,0,640,641,1,0,0,0,641,642,1,0,0,0,642,643,
		5,31,0,0,643,645,3,144,72,0,644,646,3,68,34,0,645,644,1,0,0,0,645,646,
		1,0,0,0,646,648,1,0,0,0,647,649,3,130,65,0,648,647,1,0,0,0,648,649,1,0,
		0,0,649,129,1,0,0,0,650,652,5,4,0,0,651,653,3,106,53,0,652,651,1,0,0,0,
		653,654,1,0,0,0,654,652,1,0,0,0,654,655,1,0,0,0,655,656,1,0,0,0,656,657,
		5,5,0,0,657,131,1,0,0,0,658,659,5,22,0,0,659,660,5,31,0,0,660,662,3,144,
		72,0,661,663,3,68,34,0,662,661,1,0,0,0,662,663,1,0,0,0,663,664,1,0,0,0,
		664,665,3,130,65,0,665,672,1,0,0,0,666,667,5,22,0,0,667,668,5,31,0,0,668,
		669,3,144,72,0,669,670,3,68,34,0,670,672,1,0,0,0,671,658,1,0,0,0,671,666,
		1,0,0,0,672,133,1,0,0,0,673,675,3,86,43,0,674,673,1,0,0,0,674,675,1,0,
		0,0,675,676,1,0,0,0,676,677,5,32,0,0,677,678,5,20,0,0,678,680,3,144,72,
		0,679,681,3,104,52,0,680,679,1,0,0,0,680,681,1,0,0,0,681,683,1,0,0,0,682,
		684,5,33,0,0,683,682,1,0,0,0,683,684,1,0,0,0,684,685,1,0,0,0,685,686,5,
		11,0,0,686,687,3,136,68,0,687,135,1,0,0,0,688,693,3,138,69,0,689,690,5,
		29,0,0,690,692,3,138,69,0,691,689,1,0,0,0,692,695,1,0,0,0,693,691,1,0,
		0,0,693,694,1,0,0,0,694,137,1,0,0,0,695,693,1,0,0,0,696,699,3,140,70,0,
		697,699,3,142,71,0,698,696,1,0,0,0,698,697,1,0,0,0,699,139,1,0,0,0,700,
		701,7,3,0,0,701,141,1,0,0,0,702,703,7,4,0,0,703,143,1,0,0,0,704,705,5,
		53,0,0,705,145,1,0,0,0,95,149,156,161,165,169,172,175,180,188,195,198,
		202,205,208,214,228,234,245,248,261,281,285,291,307,315,322,326,328,339,
		344,349,354,359,363,367,373,384,390,397,407,415,418,423,431,436,439,442,
		447,456,463,468,472,477,483,488,494,497,503,506,514,523,526,531,534,537,
		543,546,554,558,561,566,569,573,580,587,596,599,604,607,613,618,622,628,
		637,640,645,648,654,662,671,674,680,683,693,698
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
