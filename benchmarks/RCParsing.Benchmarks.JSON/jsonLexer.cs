//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from e:/CSharp Projects/ANTLR Parsers/JSON/json.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class jsonLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, STRING=7, NUMBER=8, TRUE=9, 
		FALSE=10, NULL=11, WS=12;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "STRING", "NUMBER", "TRUE", 
		"FALSE", "NULL", "WS"
	};


	public jsonLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public jsonLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "':'", "'{'", "','", "'}'", "'['", "']'", null, null, "'true'", 
		"'false'", "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "STRING", "NUMBER", "TRUE", 
		"FALSE", "NULL", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "json.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static jsonLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,12,74,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,1,0,1,0,1,1,1,1,1,2,1,2,1,
		3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,5,6,40,8,6,10,6,12,6,43,9,6,1,6,1,6,1,7,
		4,7,48,8,7,11,7,12,7,49,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,
		10,1,10,1,10,1,10,1,10,1,11,4,11,69,8,11,11,11,12,11,70,1,11,1,11,0,0,
		12,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,1,0,3,1,0,
		34,34,1,0,48,57,3,0,9,10,13,13,32,32,76,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
		0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
		17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,1,25,1,0,0,0,3,27,1,
		0,0,0,5,29,1,0,0,0,7,31,1,0,0,0,9,33,1,0,0,0,11,35,1,0,0,0,13,37,1,0,0,
		0,15,47,1,0,0,0,17,51,1,0,0,0,19,56,1,0,0,0,21,62,1,0,0,0,23,68,1,0,0,
		0,25,26,5,58,0,0,26,2,1,0,0,0,27,28,5,123,0,0,28,4,1,0,0,0,29,30,5,44,
		0,0,30,6,1,0,0,0,31,32,5,125,0,0,32,8,1,0,0,0,33,34,5,91,0,0,34,10,1,0,
		0,0,35,36,5,93,0,0,36,12,1,0,0,0,37,41,5,34,0,0,38,40,8,0,0,0,39,38,1,
		0,0,0,40,43,1,0,0,0,41,39,1,0,0,0,41,42,1,0,0,0,42,44,1,0,0,0,43,41,1,
		0,0,0,44,45,5,34,0,0,45,14,1,0,0,0,46,48,7,1,0,0,47,46,1,0,0,0,48,49,1,
		0,0,0,49,47,1,0,0,0,49,50,1,0,0,0,50,16,1,0,0,0,51,52,5,116,0,0,52,53,
		5,114,0,0,53,54,5,117,0,0,54,55,5,101,0,0,55,18,1,0,0,0,56,57,5,102,0,
		0,57,58,5,97,0,0,58,59,5,108,0,0,59,60,5,115,0,0,60,61,5,101,0,0,61,20,
		1,0,0,0,62,63,5,110,0,0,63,64,5,117,0,0,64,65,5,108,0,0,65,66,5,108,0,
		0,66,22,1,0,0,0,67,69,7,2,0,0,68,67,1,0,0,0,69,70,1,0,0,0,70,68,1,0,0,
		0,70,71,1,0,0,0,71,72,1,0,0,0,72,73,6,11,0,0,73,24,1,0,0,0,4,0,41,49,70,
		1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
