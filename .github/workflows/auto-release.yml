name: Auto Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version for release:'
        required: false
        default: ''
  pull_request:
    types: [merged]
    branches: [main, master]

jobs:
  check-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get version
      id: get_version
      run: |
        if [ -n "${{ github.event.inputs.version }}" ]; then
          echo "Using specified version: ${{ github.event.inputs.version }}"
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          echo "Got version: ${{ github.event.inputs.version }}"
        else
          echo "Fetching version from .csproj"
          CSPROJ_FILE=$(find . -name "RCParsing.csproj" | head -n 1)
          VERSION=$(grep -oP '<Version>\K[^<]+' $CSPROJ_FILE || grep -oP '<VersionPrefix>\K[^<]+' $CSPROJ_FILE)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Got version: $VERSION"
        fi

  release:
    needs: check-release
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
    
    - name: Build project
      run: dotnet build --configuration Release

    - name: Run tests
      run: dotnet test --configuration Release --no-build

    - name: Create NuGet package
      run: dotnet pack --configuration Release --no-build --output nupkg

    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.check-release.outputs.version }}
        name: v${{ needs.check-release.outputs.version }}
        # files: "**/RCParsing.${{ needs.check-release.outputs.version }}.nupkg"
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Publish to NuGet
      run: dotnet nuget push "**/RCParsing.${{ needs.check-release.outputs.version }}.nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
