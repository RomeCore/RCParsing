import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as n}from"./app-mHMKONbN.js";const t={};function l(h,i){return n(),a("div",null,[...i[0]||(i[0]=[e(`<h1 id="fail" tabindex="-1"><a class="header-anchor" href="#fail"><span>Fail</span></a></h1><p>The <code>Fail</code> token in <code>RCParsing</code> always fails without consuming input. It’s used to explicitly block a parsing path in a grammar.</p><h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview"><span>Overview</span></a></h2><p>The <code>Fail</code> token is a zero-width token that immediately fails, producing no intermediate value. It’s useful for enforcing constraints or preventing certain matches in <code>Choice</code> or other combinators.</p><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h2><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-csharp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> builder</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> new </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ParserBuilder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">builder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">CreateToken</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;no_match&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Fail</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> parser</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> builder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Build</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> result</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> parser</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">MatchToken</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;no_match&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;anything&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Fails</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="use-cases" tabindex="-1"><a class="header-anchor" href="#use-cases"><span>Use Cases</span></a></h2><ul><li><strong>Block Paths</strong>: Prevent specific branches in a <code>Choice</code> token.</li><li><strong>Constraints</strong>: Enforce parsing rules by failing invalid paths.</li><li><strong>Debugging</strong>: Test parser behavior by forcing failure.</li></ul><h2 id="intermediate-values" tabindex="-1"><a class="header-anchor" href="#intermediate-values"><span>Intermediate Values</span></a></h2><p>The <code>Fail</code> token never succeeds, so it produces no intermediate value.</p><h2 id="notes" tabindex="-1"><a class="header-anchor" href="#notes"><span>Notes</span></a></h2><ul><li><strong>Zero-Width</strong>: Does not consume any input.</li><li><strong>Always Fails</strong>: Useful for explicitly invalid patterns.</li></ul><h2 id="related-tutorials" tabindex="-1"><a class="header-anchor" href="#related-tutorials"><span>Related Tutorials</span></a></h2><ul><li><a href="empty">Empty Token</a></li><li><a href="combinators/choice">Choice Token</a></li><li><a href="combinators/lookahead">Lookahead Token</a></li></ul>`,14)])])}const o=s(t,[["render",l]]),k=JSON.parse('{"path":"/elements_library/tokens/fail.html","title":"Fail","lang":"en-US","frontmatter":{},"git":{"createdTime":1760390143000,"updatedTime":1760390143000,"contributors":[{"name":"RomeCore","username":"RomeCore","email":"62770895+RomeCore@users.noreply.github.com","commits":1,"url":"https://github.com/RomeCore"}]},"readingTime":{"minutes":0.46,"words":138},"filePathRelative":"elements_library/tokens/fail.md"}');export{o as comp,k as data};
