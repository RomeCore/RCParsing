import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a,o as n}from"./app-mHMKONbN.js";const e={};function l(d,s){return n(),t("div",null,[...s[0]||(s[0]=[a(`<p>Some settings in the parser elements (tokens and rules) can be <em>static</em> (unlike <em>runtime</em> settings that support inheritance, e.g. a skip-rule, skip strategy and error handling) and may be applied to specific elements at the <strong>compiling</strong> stage of building (the <code>builder.Build()</code> call).</p><p>You can apply initialization flags on parser elements using <code>Setting</code> property on builder:</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-csharp"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">builder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Settings</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">UseInitFlags</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(...);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>There is example of applying <code>EnableMemoization</code> initialization flag:</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-csharp"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">builder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Settings</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">UseInitFlags</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">ParserInitFlags</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">EnableMemoization</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>And there is some of shortcut/sugar versions:</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-csharp"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">builder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Settings</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">UseInlining</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Inlines some rules instead of calling the Parser</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">builder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Settings</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">UseFirstCharacterMatch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Will choose rules based on lookahead, not effective on simple grammars</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">builder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Settings</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">UseCaching</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// All elements will use memoization, impacts on performance but crucial for complex grammars</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">builder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Settings</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WriteStackTrace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// All elements will record stack trace, providing a brief look at the structure of the current rule context</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">builder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Settings</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RecordWalkTrace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// All elements will record walk trace, the list of logs displaying what rules was trying to parse with useful information</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">builder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Settings</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">DetailedErrors</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// When parser throws errors, they will display more information</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">builder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Settings</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ErrorFormatting</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">	ErrorFormattingFlags</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">DisplayRules</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">	ErrorFormattingFlags</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">DisplayMessages</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">	ErrorFormattingFlags</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">MoreGroups</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// DetailedErrors is the sugar for this</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">builder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Settings</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">UseDebug</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Uses both WriteStackTrace and DetailedErrors</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you use one previous methods, initialization flags will be applied to <em>ALL</em> parser elements.</p><p><em>Want to apply these flags more precisely?</em><br> There is example how to apply <code>StackTraceWriting</code> initialization flag on the <code>TokenParserRule</code> that holds <code>WhitespacesTokenPattern</code>:</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-csharp"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">builder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Settings</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">UseInitFlagsOn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">ParserInitFlags</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">StackTraceWriting</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">	elem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =&gt; </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">elem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> is </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">TokenParserRule</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> tokenRule</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">	tokenRule</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">TokenPattern</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> is </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">WhitespacesTokenPattern</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here is default error example on JSON grammar (ooops, i put extra comma in object definition):</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>RCParsing.ParsingException : An error occurred during parsing:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>The line where the error occurred:</span></span>
<span class="line"><span>	&quot;tags&quot;: [&quot;tag1&quot;, &quot;tag2&quot;, &quot;tag3&quot;],,</span></span>
<span class="line"><span>                   line 5, column 35 ^</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&#39;,&#39; is unexpected character, expected one of:</span></span>
<span class="line"><span>  &#39;string&#39;</span></span>
<span class="line"><span>  literal: &#39;}&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>...and more errors omitted.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And here is errors with <code>UseDebug()</code> setting applied:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>RCParsing.ParsingException : An error occurred during parsing:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&#39;string&#39;: Failed to parse token.</span></span>
<span class="line"><span>&#39;pair&#39;: Failed to parse sequence rule.</span></span>
<span class="line"><span>(SeparatedRepeat[0..]...): Expected element after separator, but found none.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>The line where the error occurred (position 109):</span></span>
<span class="line"><span>	&quot;tags&quot;: [&quot;tag1&quot;, &quot;tag2&quot;, &quot;tag3&quot;],,</span></span>
<span class="line"><span>                   line 5, column 35 ^</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&#39;,&#39; is unexpected character, expected one of:</span></span>
<span class="line"><span>  &#39;string&#39;</span></span>
<span class="line"><span>  &#39;pair&#39;</span></span>
<span class="line"><span>  SeparatedRepeat[0..]: &#39;pair&#39; sep literal &#39;,&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[&#39;string&#39;] Stack trace (top call recently):</span></span>
<span class="line"><span>- Sequence &#39;pair&#39;:</span></span>
<span class="line"><span>    &#39;string&#39; &lt;-- here</span></span>
<span class="line"><span>    literal &#39;:&#39;</span></span>
<span class="line"><span>    &#39;value&#39;</span></span>
<span class="line"><span>- SeparatedRepeat[0..]: &#39;pair&#39; &lt;-- here</span></span>
<span class="line"><span>  sep literal &#39;,&#39;</span></span>
<span class="line"><span>- Sequence &#39;object&#39;:</span></span>
<span class="line"><span>    literal &#39;{&#39;</span></span>
<span class="line"><span>    SeparatedRepeat[0..]... &lt;-- here</span></span>
<span class="line"><span>    literal &#39;}&#39;</span></span>
<span class="line"><span>- Choice &#39;value&#39;:</span></span>
<span class="line"><span>    &#39;string&#39;</span></span>
<span class="line"><span>    &#39;number&#39;</span></span>
<span class="line"><span>    &#39;boolean&#39;</span></span>
<span class="line"><span>    &#39;null&#39;</span></span>
<span class="line"><span>    &#39;array&#39;</span></span>
<span class="line"><span>    &#39;object&#39; &lt;-- here</span></span>
<span class="line"><span>- Sequence:</span></span>
<span class="line"><span>    &#39;value&#39; &lt;-- here</span></span>
<span class="line"><span>    end of file</span></span>
<span class="line"><span></span></span>
<span class="line"><span>... and more errors omitted</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Walk Trace:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>... 310 hidden parsing steps. Total: 340 ...</span></span>
<span class="line"><span>[SUCCESS] pos:107   literal &#39;]&#39; matched: &#39;]&#39; [1 chars]</span></span>
<span class="line"><span>[SUCCESS] pos:84    &#39;array&#39; matched: &#39;[&quot;tag1&quot;, &quot;tag2&quot;, &quot;tag3&quot;]&#39; [24 chars]</span></span>
<span class="line"><span>[SUCCESS] pos:84    &#39;value&#39; matched: &#39;[&quot;tag1&quot;, &quot;tag2&quot;, &quot;tag3&quot;]&#39; [24 chars]</span></span>
<span class="line"><span>[SUCCESS] pos:76    &#39;pair&#39; matched: &#39;&quot;tags&quot;: [&quot;tag1&quot; ..... &quot;, &quot;tag3&quot;]&#39; [32 chars]</span></span>
<span class="line"><span>[ENTER]   pos:108   &#39;skip&#39;</span></span>
<span class="line"><span>[ENTER]   pos:108   whitespaces</span></span>
<span class="line"><span>[FAIL]    pos:108   whitespaces failed to match: &#39;,,\\r\\n\\t&quot;isActive&quot;...&#39;</span></span>
<span class="line"><span>[ENTER]   pos:108   Sequence...</span></span>
<span class="line"><span>[ENTER]   pos:108   literal &#39;//&#39;</span></span>
<span class="line"><span>[FAIL]    pos:108   literal &#39;//&#39; failed to match: &#39;,,\\r\\n\\t&quot;isActive&quot;...&#39;</span></span>
<span class="line"><span>[FAIL]    pos:108   Sequence... failed to match: &#39;,,\\r\\n\\t&quot;isActive&quot;...&#39;</span></span>
<span class="line"><span>[FAIL]    pos:108   &#39;skip&#39; failed to match: &#39;,,\\r\\n\\t&quot;isActive&quot;...&#39;</span></span>
<span class="line"><span>[ENTER]   pos:108   literal &#39;,&#39;</span></span>
<span class="line"><span>[SUCCESS] pos:108   literal &#39;,&#39; matched: &#39;,&#39; [1 chars]</span></span>
<span class="line"><span>[ENTER]   pos:109   &#39;skip&#39;</span></span>
<span class="line"><span>[ENTER]   pos:109   whitespaces</span></span>
<span class="line"><span>[FAIL]    pos:109   whitespaces failed to match: &#39;,\\r\\n\\t&quot;isActive&quot;:...&#39;</span></span>
<span class="line"><span>[ENTER]   pos:109   Sequence...</span></span>
<span class="line"><span>[ENTER]   pos:109   literal &#39;//&#39;</span></span>
<span class="line"><span>[FAIL]    pos:109   literal &#39;//&#39; failed to match: &#39;,\\r\\n\\t&quot;isActive&quot;:...&#39;</span></span>
<span class="line"><span>[FAIL]    pos:109   Sequence... failed to match: &#39;,\\r\\n\\t&quot;isActive&quot;:...&#39;</span></span>
<span class="line"><span>[FAIL]    pos:109   &#39;skip&#39; failed to match: &#39;,\\r\\n\\t&quot;isActive&quot;:...&#39;</span></span>
<span class="line"><span>[ENTER]   pos:109   &#39;pair&#39;</span></span>
<span class="line"><span>[ENTER]   pos:109   &#39;string&#39;</span></span>
<span class="line"><span>[FAIL]    pos:109   &#39;string&#39; failed to match: &#39;,\\r\\n\\t&quot;isActive&quot;:...&#39;</span></span>
<span class="line"><span>[FAIL]    pos:109   &#39;pair&#39; failed to match: &#39;,\\r\\n\\t&quot;isActive&quot;:...&#39;</span></span>
<span class="line"><span>[FAIL]    pos:4     SeparatedRepeat[0..]... failed to match: &#39;&quot;id&quot;: 1,\\r\\n\\t&quot;nam...&#39;</span></span>
<span class="line"><span>[FAIL]    pos:0     &#39;object&#39; failed to match: &#39;{\\r\\n\\t&quot;id&quot;: 1,\\r\\n\\t...&#39;</span></span>
<span class="line"><span>[FAIL]    pos:0     &#39;value&#39; failed to match: &#39;{\\r\\n\\t&quot;id&quot;: 1,\\r\\n\\t...&#39;</span></span>
<span class="line"><span>[FAIL]    pos:0     Sequence... failed to match: &#39;{\\r\\n\\t&quot;id&quot;: 1,\\r\\n\\t...&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>... End of walk trace ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There is JSON benchmark demonstrating how different settings impacts on performance:</p><table><thead><tr><th>Method</th><th style="text-align:right;">Mean</th><th style="text-align:right;">Error</th><th style="text-align:right;">StdDev</th><th style="text-align:right;">Ratio</th><th style="text-align:right;">RatioSD</th><th style="text-align:right;">Gen0</th><th style="text-align:right;">Gen1</th><th style="text-align:right;">Gen2</th><th style="text-align:right;">Allocated</th><th style="text-align:right;">Alloc Ratio</th></tr></thead><tbody><tr><td>Default</td><td style="text-align:right;">193.36 us</td><td style="text-align:right;">1.551 us</td><td style="text-align:right;">0.689 us</td><td style="text-align:right;">1.00</td><td style="text-align:right;">0.00</td><td style="text-align:right;">13.1836</td><td style="text-align:right;">3.9063</td><td style="text-align:right;">-</td><td style="text-align:right;">216.68 KB</td><td style="text-align:right;">1.00</td></tr><tr><td>NoValue</td><td style="text-align:right;">160.82 us</td><td style="text-align:right;">6.315 us</td><td style="text-align:right;">2.252 us</td><td style="text-align:right;">0.83</td><td style="text-align:right;">0.01</td><td style="text-align:right;">8.0566</td><td style="text-align:right;">2.4414</td><td style="text-align:right;">-</td><td style="text-align:right;">134.78 KB</td><td style="text-align:right;">0.62</td></tr><tr><td>OptimizedWhitespaces</td><td style="text-align:right;">126.71 us</td><td style="text-align:right;">0.771 us</td><td style="text-align:right;">0.342 us</td><td style="text-align:right;">0.66</td><td style="text-align:right;">0.00</td><td style="text-align:right;">13.1836</td><td style="text-align:right;">3.9063</td><td style="text-align:right;">-</td><td style="text-align:right;">216.68 KB</td><td style="text-align:right;">1.00</td></tr><tr><td>Inlined</td><td style="text-align:right;">143.75 us</td><td style="text-align:right;">0.779 us</td><td style="text-align:right;">0.278 us</td><td style="text-align:right;">0.74</td><td style="text-align:right;">0.00</td><td style="text-align:right;">13.1836</td><td style="text-align:right;">3.9063</td><td style="text-align:right;">-</td><td style="text-align:right;">216.68 KB</td><td style="text-align:right;">1.00</td></tr><tr><td>FirstCharacterMatch</td><td style="text-align:right;">150.79 us</td><td style="text-align:right;">1.567 us</td><td style="text-align:right;">0.559 us</td><td style="text-align:right;">0.78</td><td style="text-align:right;">0.00</td><td style="text-align:right;">9.7656</td><td style="text-align:right;">2.1973</td><td style="text-align:right;">-</td><td style="text-align:right;">160.61 KB</td><td style="text-align:right;">0.74</td></tr><tr><td>IgnoreErrors</td><td style="text-align:right;">185.20 us</td><td style="text-align:right;">1.546 us</td><td style="text-align:right;">0.687 us</td><td style="text-align:right;">0.96</td><td style="text-align:right;">0.00</td><td style="text-align:right;">9.2773</td><td style="text-align:right;">1.9531</td><td style="text-align:right;">-</td><td style="text-align:right;">152.59 KB</td><td style="text-align:right;">0.70</td></tr><tr><td>StackTrace</td><td style="text-align:right;">218.43 us</td><td style="text-align:right;">1.977 us</td><td style="text-align:right;">0.705 us</td><td style="text-align:right;">1.13</td><td style="text-align:right;">0.01</td><td style="text-align:right;">21.4844</td><td style="text-align:right;">8.3008</td><td style="text-align:right;">-</td><td style="text-align:right;">353.79 KB</td><td style="text-align:right;">1.63</td></tr><tr><td>WalkTrace</td><td style="text-align:right;">314.81 us</td><td style="text-align:right;">2.223 us</td><td style="text-align:right;">0.987 us</td><td style="text-align:right;">1.63</td><td style="text-align:right;">0.01</td><td style="text-align:right;">94.2383</td><td style="text-align:right;">85.4492</td><td style="text-align:right;">75.1953</td><td style="text-align:right;">601.1 KB</td><td style="text-align:right;">2.77</td></tr><tr><td>LazyAST</td><td style="text-align:right;">221.00 us</td><td style="text-align:right;">3.437 us</td><td style="text-align:right;">1.526 us</td><td style="text-align:right;">1.14</td><td style="text-align:right;">0.01</td><td style="text-align:right;">20.7520</td><td style="text-align:right;">9.2773</td><td style="text-align:right;">-</td><td style="text-align:right;">341.2 KB</td><td style="text-align:right;">1.57</td></tr><tr><td>RecordSkipped</td><td style="text-align:right;">199.96 us</td><td style="text-align:right;">1.016 us</td><td style="text-align:right;">0.451 us</td><td style="text-align:right;">1.03</td><td style="text-align:right;">0.00</td><td style="text-align:right;">15.6250</td><td style="text-align:right;">5.1270</td><td style="text-align:right;">-</td><td style="text-align:right;">256.71 KB</td><td style="text-align:right;">1.18</td></tr><tr><td>Memoized</td><td style="text-align:right;">489.61 us</td><td style="text-align:right;">4.543 us</td><td style="text-align:right;">2.017 us</td><td style="text-align:right;">2.53</td><td style="text-align:right;">0.01</td><td style="text-align:right;">107.4219</td><td style="text-align:right;">106.4453</td><td style="text-align:right;">86.9141</td><td style="text-align:right;">667.39 KB</td><td style="text-align:right;">3.08</td></tr><tr><td>FastestNoValue</td><td style="text-align:right;">62.98 us</td><td style="text-align:right;">0.373 us</td><td style="text-align:right;">0.166 us</td><td style="text-align:right;">0.33</td><td style="text-align:right;">0.00</td><td style="text-align:right;">4.2725</td><td style="text-align:right;">0.8545</td><td style="text-align:right;">-</td><td style="text-align:right;">70.7 KB</td><td style="text-align:right;">0.33</td></tr><tr><td>Fastest</td><td style="text-align:right;">93.34 us</td><td style="text-align:right;">0.381 us</td><td style="text-align:right;">0.169 us</td><td style="text-align:right;">0.48</td><td style="text-align:right;">0.00</td><td style="text-align:right;">9.2773</td><td style="text-align:right;">2.0752</td><td style="text-align:right;">-</td><td style="text-align:right;">152.59 KB</td><td style="text-align:right;">0.70</td></tr><tr><td>Slowest</td><td style="text-align:right;">830.04 us</td><td style="text-align:right;">57.607 us</td><td style="text-align:right;">25.578 us</td><td style="text-align:right;">4.29</td><td style="text-align:right;">0.12</td><td style="text-align:right;">197.2656</td><td style="text-align:right;">196.2891</td><td style="text-align:right;">152.3438</td><td style="text-align:right;">1353.4 KB</td><td style="text-align:right;">6.25</td></tr></tbody></table><p>Note: <code>*NoValue</code> method doesn&#39;t calculate value via transformation functions, just parsing text and returns AST.</p>`,17)])])}const h=i(e,[["render",l]]),g=JSON.parse('{"path":"/guide/initialization-flags-debugging-and-performance.html","title":"Initialization flags, debugging and performance","lang":"en-US","frontmatter":{"title":"Initialization flags, debugging and performance","icon":"chart-line"},"git":{"createdTime":1758729324000,"updatedTime":1760390143000,"contributors":[{"name":"RomeCore","username":"RomeCore","email":"62770895+RomeCore@users.noreply.github.com","commits":2,"url":"https://github.com/RomeCore"}]},"readingTime":{"minutes":3.1,"words":930},"filePathRelative":"guide/initialization-flags-debugging-and-performance.md"}');export{h as comp,g as data};
